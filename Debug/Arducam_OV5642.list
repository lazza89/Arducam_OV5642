
Arducam_OV5642.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004798  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800495c  0800495c  0000595c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a04  08004a04  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004a04  08004a04  00005a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a0c  08004a0c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a0c  08004a0c  00005a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a10  08004a10  00005a10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004a14  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000068  08004a7c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08004a7c  000062cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc4e  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d45  00000000  00000000  00012ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c78  00000000  00000000  00014a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009bd  00000000  00000000  000156a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000224d4  00000000  00000000  00016065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f951  00000000  00000000  00038539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce631  00000000  00000000  00047e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001164bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a7c  00000000  00000000  00116500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00119f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004944 	.word	0x08004944

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08004944 	.word	0x08004944

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <OV5642_WriteRegister>:
#define ARDUCAM_ADDR 0x78  // Indirizzo I2C

uint8_t firmware_reg = 0x40;  // Registro versione firmware
uint8_t firmware_version;

HAL_StatusTypeDef OV5642_WriteRegister(uint16_t reg, uint8_t value) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	80fb      	strh	r3, [r7, #6]
 8000500:	4613      	mov	r3, r2
 8000502:	717b      	strb	r3, [r7, #5]
    uint8_t data[3] = {(reg >> 8) & 0xFF, reg & 0xFF, value};
 8000504:	88fb      	ldrh	r3, [r7, #6]
 8000506:	0a1b      	lsrs	r3, r3, #8
 8000508:	b29b      	uxth	r3, r3
 800050a:	b2db      	uxtb	r3, r3
 800050c:	733b      	strb	r3, [r7, #12]
 800050e:	88fb      	ldrh	r3, [r7, #6]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	737b      	strb	r3, [r7, #13]
 8000514:	797b      	ldrb	r3, [r7, #5]
 8000516:	73bb      	strb	r3, [r7, #14]
    return HAL_I2C_Master_Transmit(&hi2c1, ARDUCAM_ADDR, data, 3, HAL_MAX_DELAY);
 8000518:	f107 020c 	add.w	r2, r7, #12
 800051c:	f04f 33ff 	mov.w	r3, #4294967295
 8000520:	9300      	str	r3, [sp, #0]
 8000522:	2303      	movs	r3, #3
 8000524:	2178      	movs	r1, #120	@ 0x78
 8000526:	4804      	ldr	r0, [pc, #16]	@ (8000538 <OV5642_WriteRegister+0x44>)
 8000528:	f001 f9a8 	bl	800187c <HAL_I2C_Master_Transmit>
 800052c:	4603      	mov	r3, r0
}
 800052e:	4618      	mov	r0, r3
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000084 	.word	0x20000084

0800053c <OV5642_ReadRegister>:

uint8_t OV5642_ReadRegister(uint16_t reg) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af02      	add	r7, sp, #8
 8000542:	4603      	mov	r3, r0
 8000544:	80fb      	strh	r3, [r7, #6]
    uint8_t reg_addr[2] = {(reg >> 8) & 0xFF, reg & 0xFF};
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b29b      	uxth	r3, r3
 800054c:	b2db      	uxtb	r3, r3
 800054e:	733b      	strb	r3, [r7, #12]
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	737b      	strb	r3, [r7, #13]
    uint8_t value;
    HAL_I2C_Master_Transmit(&hi2c1, ARDUCAM_ADDR, reg_addr, 2, HAL_MAX_DELAY);
 8000556:	f107 020c 	add.w	r2, r7, #12
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	9300      	str	r3, [sp, #0]
 8000560:	2302      	movs	r3, #2
 8000562:	2178      	movs	r1, #120	@ 0x78
 8000564:	4808      	ldr	r0, [pc, #32]	@ (8000588 <OV5642_ReadRegister+0x4c>)
 8000566:	f001 f989 	bl	800187c <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, ARDUCAM_ADDR, &value, 1, HAL_MAX_DELAY);
 800056a:	f107 020b 	add.w	r2, r7, #11
 800056e:	f04f 33ff 	mov.w	r3, #4294967295
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2301      	movs	r3, #1
 8000576:	2178      	movs	r1, #120	@ 0x78
 8000578:	4803      	ldr	r0, [pc, #12]	@ (8000588 <OV5642_ReadRegister+0x4c>)
 800057a:	f001 fa7d 	bl	8001a78 <HAL_I2C_Master_Receive>
    return value;
 800057e:	7afb      	ldrb	r3, [r7, #11]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000084 	.word	0x20000084

0800058c <OV5642_Select>:

void OV5642_Select() {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);  // CS Low
 8000590:	2200      	movs	r2, #0
 8000592:	2101      	movs	r1, #1
 8000594:	4802      	ldr	r0, [pc, #8]	@ (80005a0 <OV5642_Select+0x14>)
 8000596:	f001 f813 	bl	80015c0 <HAL_GPIO_WritePin>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	40020400 	.word	0x40020400

080005a4 <OV5642_Deselect>:

void OV5642_Deselect() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);    // CS High
 80005a8:	2201      	movs	r2, #1
 80005aa:	2101      	movs	r1, #1
 80005ac:	4802      	ldr	r0, [pc, #8]	@ (80005b8 <OV5642_Deselect+0x14>)
 80005ae:	f001 f807 	bl	80015c0 <HAL_GPIO_WritePin>
}
 80005b2:	bf00      	nop
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40020400 	.word	0x40020400

080005bc <OV5642_SPI_SendCommand>:

uint8_t OV5642_SPI_SendCommand(uint8_t cmd) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af02      	add	r7, sp, #8
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
    uint8_t response;
    HAL_SPI_TransmitReceive(&hspi1, &cmd, &response, 1, HAL_MAX_DELAY);
 80005c6:	f107 020f 	add.w	r2, r7, #15
 80005ca:	1df9      	adds	r1, r7, #7
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2301      	movs	r3, #1
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <OV5642_SPI_SendCommand+0x28>)
 80005d6:	f002 fe78 	bl	80032ca <HAL_SPI_TransmitReceive>
    return response;
 80005da:	7bfb      	ldrb	r3, [r7, #15]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	200000d8 	.word	0x200000d8

080005e8 <OV5642_Init>:
    OV5642_Deselect();
    return pixel;
}


void OV5642_Init() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
    // Reset the camera
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_RESET);  // RESET LOW
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	481a      	ldr	r0, [pc, #104]	@ (800065c <OV5642_Init+0x74>)
 80005f2:	f000 ffe5 	bl	80015c0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005f6:	200a      	movs	r0, #10
 80005f8:	f000 fd44 	bl	8001084 <HAL_Delay>
    HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);    // RESET HIGH
 80005fc:	2201      	movs	r2, #1
 80005fe:	2101      	movs	r1, #1
 8000600:	4816      	ldr	r0, [pc, #88]	@ (800065c <OV5642_Init+0x74>)
 8000602:	f000 ffdd 	bl	80015c0 <HAL_GPIO_WritePin>

    // Configure camera settings
    OV5642_WriteRegister(0x3103, 0x11);  // Clock from PLL
 8000606:	2111      	movs	r1, #17
 8000608:	f243 1003 	movw	r0, #12547	@ 0x3103
 800060c:	f7ff ff72 	bl	80004f4 <OV5642_WriteRegister>
    OV5642_WriteRegister(0x3008, 0x82);  // System reset
 8000610:	2182      	movs	r1, #130	@ 0x82
 8000612:	f243 0008 	movw	r0, #12296	@ 0x3008
 8000616:	f7ff ff6d 	bl	80004f4 <OV5642_WriteRegister>
    HAL_Delay(100);
 800061a:	2064      	movs	r0, #100	@ 0x64
 800061c:	f000 fd32 	bl	8001084 <HAL_Delay>

    // Write specific configuration for JPEG output (example)
    OV5642_WriteRegister(0x3035, 0x21);  // PLL settings
 8000620:	2121      	movs	r1, #33	@ 0x21
 8000622:	f243 0035 	movw	r0, #12341	@ 0x3035
 8000626:	f7ff ff65 	bl	80004f4 <OV5642_WriteRegister>
    OV5642_WriteRegister(0x3036, 0x69);
 800062a:	2169      	movs	r1, #105	@ 0x69
 800062c:	f243 0036 	movw	r0, #12342	@ 0x3036
 8000630:	f7ff ff60 	bl	80004f4 <OV5642_WriteRegister>
    OV5642_WriteRegister(0x3C07, 0x08);  // Light frequency (50Hz/60Hz)
 8000634:	2108      	movs	r1, #8
 8000636:	f643 4007 	movw	r0, #15367	@ 0x3c07
 800063a:	f7ff ff5b 	bl	80004f4 <OV5642_WriteRegister>
    OV5642_WriteRegister(0x3820, 0x47);  // Image flip
 800063e:	2147      	movs	r1, #71	@ 0x47
 8000640:	f643 0020 	movw	r0, #14368	@ 0x3820
 8000644:	f7ff ff56 	bl	80004f4 <OV5642_WriteRegister>
    OV5642_WriteRegister(0x3821, 0x01);  // Image mirror
 8000648:	2101      	movs	r1, #1
 800064a:	f643 0021 	movw	r0, #14369	@ 0x3821
 800064e:	f7ff ff51 	bl	80004f4 <OV5642_WriteRegister>

    // More settings depending on your resolution and format needs
    printf("Camera initialized\n");
 8000652:	4803      	ldr	r0, [pc, #12]	@ (8000660 <OV5642_Init+0x78>)
 8000654:	f003 fde2 	bl	800421c <puts>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400
 8000660:	0800495c 	.word	0x0800495c

08000664 <OV5642_StartCapture>:

void OV5642_StartCapture() {
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    OV5642_Select();
 8000668:	f7ff ff90 	bl	800058c <OV5642_Select>
    OV5642_SPI_SendCommand(0x84);  // SPI capture command
 800066c:	2084      	movs	r0, #132	@ 0x84
 800066e:	f7ff ffa5 	bl	80005bc <OV5642_SPI_SendCommand>
    OV5642_Deselect();
 8000672:	f7ff ff97 	bl	80005a4 <OV5642_Deselect>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}

0800067a <OV5642_CheckCaptureDone>:

uint8_t OV5642_CheckCaptureDone() {
 800067a:	b580      	push	{r7, lr}
 800067c:	b082      	sub	sp, #8
 800067e:	af00      	add	r7, sp, #0
    OV5642_Select();
 8000680:	f7ff ff84 	bl	800058c <OV5642_Select>
    uint8_t status = OV5642_SPI_SendCommand(0x41);  // Read FIFO status
 8000684:	2041      	movs	r0, #65	@ 0x41
 8000686:	f7ff ff99 	bl	80005bc <OV5642_SPI_SendCommand>
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
    OV5642_Deselect();
 800068e:	f7ff ff89 	bl	80005a4 <OV5642_Deselect>
    return status & 0x01;  // Check if capture is done
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	b2db      	uxtb	r3, r3
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <OV5642_ReadImage>:

void OV5642_ReadImage(uint8_t *buffer, uint32_t length) {
 80006a2:	b590      	push	{r4, r7, lr}
 80006a4:	b085      	sub	sp, #20
 80006a6:	af00      	add	r7, sp, #0
 80006a8:	6078      	str	r0, [r7, #4]
 80006aa:	6039      	str	r1, [r7, #0]
    OV5642_Select();
 80006ac:	f7ff ff6e 	bl	800058c <OV5642_Select>
    OV5642_SPI_SendCommand(0x3D);  // FIFO read command
 80006b0:	203d      	movs	r0, #61	@ 0x3d
 80006b2:	f7ff ff83 	bl	80005bc <OV5642_SPI_SendCommand>
    for (uint32_t i = 0; i < length; i++) {
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	e00a      	b.n	80006d2 <OV5642_ReadImage+0x30>
        buffer[i] = OV5642_SPI_SendCommand(0x00);  // Dummy write to clock data out
 80006bc:	687a      	ldr	r2, [r7, #4]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	18d4      	adds	r4, r2, r3
 80006c2:	2000      	movs	r0, #0
 80006c4:	f7ff ff7a 	bl	80005bc <OV5642_SPI_SendCommand>
 80006c8:	4603      	mov	r3, r0
 80006ca:	7023      	strb	r3, [r4, #0]
    for (uint32_t i = 0; i < length; i++) {
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	3301      	adds	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	d3f0      	bcc.n	80006bc <OV5642_ReadImage+0x1a>
    }
    OV5642_Deselect();
 80006da:	f7ff ff63 	bl	80005a4 <OV5642_Deselect>
}
 80006de:	bf00      	nop
 80006e0:	3714      	adds	r7, #20
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}

080006e6 <OV5642_ClearFIFO>:

void OV5642_ClearFIFO() {
 80006e6:	b580      	push	{r7, lr}
 80006e8:	af00      	add	r7, sp, #0
    OV5642_Select();
 80006ea:	f7ff ff4f 	bl	800058c <OV5642_Select>
    OV5642_SPI_SendCommand(0x04);  // Clear FIFO command
 80006ee:	2004      	movs	r0, #4
 80006f0:	f7ff ff64 	bl	80005bc <OV5642_SPI_SendCommand>
    OV5642_Deselect();
 80006f4:	f7ff ff56 	bl	80005a4 <OV5642_Deselect>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}

080006fc <SendImageUART>:

void SendImageUART(uint8_t *buffer, uint32_t length) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
 8000704:	6039      	str	r1, [r7, #0]
    uint32_t chunk_size = 64;  // Adjust chunk size as needed
 8000706:	2340      	movs	r3, #64	@ 0x40
 8000708:	613b      	str	r3, [r7, #16]
    for (uint32_t i = 0; i < length; i += chunk_size) {
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	e019      	b.n	8000744 <SendImageUART+0x48>
        uint32_t size = (i + chunk_size <= length) ? chunk_size : (length - i);
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	693b      	ldr	r3, [r7, #16]
 8000714:	4413      	add	r3, r2
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	429a      	cmp	r2, r3
 800071a:	d203      	bcs.n	8000724 <SendImageUART+0x28>
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	e000      	b.n	8000726 <SendImageUART+0x2a>
 8000724:	693b      	ldr	r3, [r7, #16]
 8000726:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, &buffer[i], size, HAL_MAX_DELAY);
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	18d1      	adds	r1, r2, r3
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	b29a      	uxth	r2, r3
 8000732:	f04f 33ff 	mov.w	r3, #4294967295
 8000736:	4808      	ldr	r0, [pc, #32]	@ (8000758 <SendImageUART+0x5c>)
 8000738:	f003 f89c 	bl	8003874 <HAL_UART_Transmit>
    for (uint32_t i = 0; i < length; i += chunk_size) {
 800073c:	697a      	ldr	r2, [r7, #20]
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	4413      	add	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	697a      	ldr	r2, [r7, #20]
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d3e1      	bcc.n	8000710 <SendImageUART+0x14>
    }
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000130 	.word	0x20000130

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b5b0      	push	{r4, r5, r7, lr}
 800075e:	f5ad 4dfa 	sub.w	sp, sp, #32000	@ 0x7d00
 8000762:	b08e      	sub	sp, #56	@ 0x38
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000766:	f000 fc1b 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076a:	f000 f89b 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076e:	f000 f995 	bl	8000a9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000772:	f000 f969 	bl	8000a48 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000776:	f000 f903 	bl	8000980 <MX_I2C1_Init>
  MX_SPI1_Init();
 800077a:	f000 f92f 	bl	80009dc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  OV5642_Init();
 800077e:	f7ff ff33 	bl	80005e8 <OV5642_Init>

  //Test if the camera is found:
  uint8_t chip_id_high = OV5642_ReadRegister(0x300a);  // High byte
 8000782:	f243 000a 	movw	r0, #12298	@ 0x300a
 8000786:	f7ff fed9 	bl	800053c <OV5642_ReadRegister>
 800078a:	4603      	mov	r3, r0
 800078c:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8000790:	f102 0237 	add.w	r2, r2, #55	@ 0x37
 8000794:	7013      	strb	r3, [r2, #0]
  uint8_t chip_id_low = OV5642_ReadRegister(0x300b);   // Low byte
 8000796:	f243 000b 	movw	r0, #12299	@ 0x300b
 800079a:	f7ff fecf 	bl	800053c <OV5642_ReadRegister>
 800079e:	4603      	mov	r3, r0
 80007a0:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 80007a4:	f102 0236 	add.w	r2, r2, #54	@ 0x36
 80007a8:	7013      	strb	r3, [r2, #0]
  char camera_ok[] = "Camera detected!";
 80007aa:	4b38      	ldr	r3, [pc, #224]	@ (800088c <main+0x130>)
 80007ac:	f507 44fa 	add.w	r4, r7, #32000	@ 0x7d00
 80007b0:	f104 041c 	add.w	r4, r4, #28
 80007b4:	461d      	mov	r5, r3
 80007b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ba:	682b      	ldr	r3, [r5, #0]
 80007bc:	7023      	strb	r3, [r4, #0]
  char camera_not_ok[] = "Camera not detected!";
 80007be:	4b34      	ldr	r3, [pc, #208]	@ (8000890 <main+0x134>)
 80007c0:	f507 44fa 	add.w	r4, r7, #32000	@ 0x7d00
 80007c4:	f104 0404 	add.w	r4, r4, #4
 80007c8:	461d      	mov	r5, r3
 80007ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80007d2:	6020      	str	r0, [r4, #0]
 80007d4:	3404      	adds	r4, #4
 80007d6:	7021      	strb	r1, [r4, #0]
  if ((chip_id_high == 0x56) && (chip_id_low == 0x42)) {
 80007d8:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80007dc:	f103 0337 	add.w	r3, r3, #55	@ 0x37
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b56      	cmp	r3, #86	@ 0x56
 80007e4:	d10f      	bne.n	8000806 <main+0xaa>
 80007e6:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80007ea:	f103 0336 	add.w	r3, r3, #54	@ 0x36
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b42      	cmp	r3, #66	@ 0x42
 80007f2:	d108      	bne.n	8000806 <main+0xaa>
	  SendImageUART(camera_ok, sizeof(camera_ok));
 80007f4:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 80007f8:	f103 031c 	add.w	r3, r3, #28
 80007fc:	2111      	movs	r1, #17
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff7c 	bl	80006fc <SendImageUART>
 8000804:	e007      	b.n	8000816 <main+0xba>
  } else {
      SendImageUART(camera_not_ok, sizeof(camera_not_ok));
 8000806:	f507 43fa 	add.w	r3, r7, #32000	@ 0x7d00
 800080a:	f103 0304 	add.w	r3, r3, #4
 800080e:	2115      	movs	r1, #21
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff73 	bl	80006fc <SendImageUART>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  OV5642_StartCapture();  // Trigger image capture
 8000816:	f7ff ff25 	bl	8000664 <OV5642_StartCapture>
  HAL_Delay(100);  // Wait for capture to complete
 800081a:	2064      	movs	r0, #100	@ 0x64
 800081c:	f000 fc32 	bl	8001084 <HAL_Delay>

  while (1)
  {


      if (OV5642_CheckCaptureDone()) {
 8000820:	f7ff ff2b 	bl	800067a <OV5642_CheckCaptureDone>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d028      	beq.n	800087c <main+0x120>
          printf("Capture complete\n");
 800082a:	481a      	ldr	r0, [pc, #104]	@ (8000894 <main+0x138>)
 800082c:	f003 fcf6 	bl	800421c <puts>

          // Read image from FIFO
          uint32_t image_length = sizeof(image_buffer);
 8000830:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8000834:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8000838:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800083c:	6013      	str	r3, [r2, #0]
          OV5642_ReadImage(image_buffer, image_length);
 800083e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000842:	3b34      	subs	r3, #52	@ 0x34
 8000844:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8000848:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 800084c:	6811      	ldr	r1, [r2, #0]
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff27 	bl	80006a2 <OV5642_ReadImage>

          // Send image over UART
          printf("Sending image...\n");
 8000854:	4810      	ldr	r0, [pc, #64]	@ (8000898 <main+0x13c>)
 8000856:	f003 fce1 	bl	800421c <puts>
          SendImageUART(image_buffer, image_length);
 800085a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800085e:	3b34      	subs	r3, #52	@ 0x34
 8000860:	f507 42fa 	add.w	r2, r7, #32000	@ 0x7d00
 8000864:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 8000868:	6811      	ldr	r1, [r2, #0]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ff46 	bl	80006fc <SendImageUART>
          printf("Image sent!\n");
 8000870:	480a      	ldr	r0, [pc, #40]	@ (800089c <main+0x140>)
 8000872:	f003 fcd3 	bl	800421c <puts>

          OV5642_ClearFIFO();  // Clear FIFO for next capture
 8000876:	f7ff ff36 	bl	80006e6 <OV5642_ClearFIFO>
 800087a:	e002      	b.n	8000882 <main+0x126>
      } else {
          printf("Capture not completed yet\n");
 800087c:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <main+0x144>)
 800087e:	f003 fccd 	bl	800421c <puts>
      }

      HAL_Delay(1000);  // Wait before capturing next frame
 8000882:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000886:	f000 fbfd 	bl	8001084 <HAL_Delay>
      if (OV5642_CheckCaptureDone()) {
 800088a:	e7c9      	b.n	8000820 <main+0xc4>
 800088c:	080049c0 	.word	0x080049c0
 8000890:	080049d4 	.word	0x080049d4
 8000894:	08004970 	.word	0x08004970
 8000898:	08004984 	.word	0x08004984
 800089c:	08004998 	.word	0x08004998
 80008a0:	080049a4 	.word	0x080049a4

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	@ 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2234      	movs	r2, #52	@ 0x34
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fd92 	bl	80043dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000978 <SystemClock_Config+0xd4>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <SystemClock_Config+0xd4>)
 80008d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d8:	4b27      	ldr	r3, [pc, #156]	@ (8000978 <SystemClock_Config+0xd4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	4b24      	ldr	r3, [pc, #144]	@ (800097c <SystemClock_Config+0xd8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008f0:	4a22      	ldr	r2, [pc, #136]	@ (800097c <SystemClock_Config+0xd8>)
 80008f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	4b20      	ldr	r3, [pc, #128]	@ (800097c <SystemClock_Config+0xd8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000904:	2302      	movs	r3, #2
 8000906:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000908:	2301      	movs	r3, #1
 800090a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800090c:	2310      	movs	r3, #16
 800090e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000910:	2302      	movs	r3, #2
 8000912:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000914:	2300      	movs	r3, #0
 8000916:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000918:	2310      	movs	r3, #16
 800091a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800091c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000920:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000922:	2304      	movs	r3, #4
 8000924:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4618      	mov	r0, r3
 8000934:	f002 f9a2 	bl	8002c7c <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800093e:	f000 f91b 	bl	8000b78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	230f      	movs	r3, #15
 8000944:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000946:	2302      	movs	r3, #2
 8000948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800094e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000952:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	2102      	movs	r1, #2
 800095e:	4618      	mov	r0, r3
 8000960:	f001 fe42 	bl	80025e8 <HAL_RCC_ClockConfig>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800096a:	f000 f905 	bl	8000b78 <Error_Handler>
  }
}
 800096e:	bf00      	nop
 8000970:	3750      	adds	r7, #80	@ 0x50
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800
 800097c:	40007000 	.word	0x40007000

08000980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000984:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MX_I2C1_Init+0x50>)
 8000986:	4a13      	ldr	r2, [pc, #76]	@ (80009d4 <MX_I2C1_Init+0x54>)
 8000988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_I2C1_Init+0x50>)
 800098c:	4a12      	ldr	r2, [pc, #72]	@ (80009d8 <MX_I2C1_Init+0x58>)
 800098e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000990:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <MX_I2C1_Init+0x50>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_I2C1_Init+0x50>)
 8000998:	2200      	movs	r2, #0
 800099a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_I2C1_Init+0x50>)
 800099e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <MX_I2C1_Init+0x50>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_I2C1_Init+0x50>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_I2C1_Init+0x50>)
 80009be:	f000 fe19 	bl	80015f4 <HAL_I2C_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009c8:	f000 f8d6 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000084 	.word	0x20000084
 80009d4:	40005400 	.word	0x40005400
 80009d8:	000186a0 	.word	0x000186a0

080009dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_SPI1_Init+0x64>)
 80009e2:	4a18      	ldr	r2, [pc, #96]	@ (8000a44 <MX_SPI1_Init+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_SPI1_Init+0x64>)
 80009e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ee:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_SPI1_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_SPI1_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_SPI1_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_SPI1_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_SPI1_Init+0x64>)
 8000a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_SPI1_Init+0x64>)
 8000a10:	2210      	movs	r2, #16
 8000a12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <MX_SPI1_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_SPI1_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <MX_SPI1_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_SPI1_Init+0x64>)
 8000a28:	220a      	movs	r2, #10
 8000a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_SPI1_Init+0x64>)
 8000a2e:	f002 fbc3 	bl	80031b8 <HAL_SPI_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a38:	f000 f89e 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000d8 	.word	0x200000d8
 8000a44:	40013000 	.word	0x40013000

08000a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <MX_USART2_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_USART2_UART_Init+0x4c>)
 8000a80:	f002 fea8 	bl	80037d4 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a8a:	f000 f875 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000130 	.word	0x20000130
 8000a98:	40004400 	.word	0x40004400

08000a9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a2c      	ldr	r2, [pc, #176]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000abc:	f043 0304 	orr.w	r3, r3, #4
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0304 	and.w	r3, r3, #4
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a25      	ldr	r2, [pc, #148]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a1e      	ldr	r2, [pc, #120]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a17      	ldr	r2, [pc, #92]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000b10:	f043 0302 	orr.w	r3, r3, #2
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <MX_GPIO_Init+0xd0>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_PIN_Pin|RESET_PIN_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2103      	movs	r1, #3
 8000b26:	4812      	ldr	r0, [pc, #72]	@ (8000b70 <MX_GPIO_Init+0xd4>)
 8000b28:	f000 fd4a 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b32:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 0314 	add.w	r3, r7, #20
 8000b40:	4619      	mov	r1, r3
 8000b42:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <MX_GPIO_Init+0xd8>)
 8000b44:	f000 fba8 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_PIN_Pin RESET_PIN_Pin */
  GPIO_InitStruct.Pin = CS_PIN_Pin|RESET_PIN_Pin;
 8000b48:	2303      	movs	r3, #3
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <MX_GPIO_Init+0xd4>)
 8000b60:	f000 fb9a 	bl	8001298 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	@ 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020400 	.word	0x40020400
 8000b74:	40020800 	.word	0x40020800

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <Error_Handler+0x8>

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b10      	ldr	r3, [pc, #64]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_MspInit+0x4c>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc2:	2007      	movs	r0, #7
 8000bc4:	f000 fb34 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40023800 	.word	0x40023800

08000bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08a      	sub	sp, #40	@ 0x28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a19      	ldr	r2, [pc, #100]	@ (8000c58 <HAL_I2C_MspInit+0x84>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d12b      	bne.n	8000c4e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <HAL_I2C_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a17      	ldr	r2, [pc, #92]	@ (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c00:	f043 0302 	orr.w	r3, r3, #2
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c12:	23c0      	movs	r3, #192	@ 0xc0
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c16:	2312      	movs	r3, #18
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c22:	2304      	movs	r3, #4
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480c      	ldr	r0, [pc, #48]	@ (8000c60 <HAL_I2C_MspInit+0x8c>)
 8000c2e:	f000 fb33 	bl	8001298 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	4a08      	ldr	r2, [pc, #32]	@ (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <HAL_I2C_MspInit+0x88>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	@ 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40005400 	.word	0x40005400
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020400 	.word	0x40020400

08000c64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a19      	ldr	r2, [pc, #100]	@ (8000ce8 <HAL_SPI_MspInit+0x84>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d12b      	bne.n	8000cde <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c8e:	4a17      	ldr	r2, [pc, #92]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000c90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	4a10      	ldr	r2, [pc, #64]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <HAL_SPI_MspInit+0x88>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cbe:	23e0      	movs	r3, #224	@ 0xe0
 8000cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	2303      	movs	r3, #3
 8000ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cce:	2305      	movs	r3, #5
 8000cd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd2:	f107 0314 	add.w	r3, r7, #20
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <HAL_SPI_MspInit+0x8c>)
 8000cda:	f000 fadd 	bl	8001298 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000cde:	bf00      	nop
 8000ce0:	3728      	adds	r7, #40	@ 0x28
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40013000 	.word	0x40013000
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	@ 0x28
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a19      	ldr	r2, [pc, #100]	@ (8000d78 <HAL_UART_MspInit+0x84>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d12b      	bne.n	8000d6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	4a17      	ldr	r2, [pc, #92]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a10      	ldr	r2, [pc, #64]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <HAL_UART_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d4e:	230c      	movs	r3, #12
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5e:	2307      	movs	r3, #7
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	4805      	ldr	r0, [pc, #20]	@ (8000d80 <HAL_UART_MspInit+0x8c>)
 8000d6a:	f000 fa95 	bl	8001298 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	@ 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <NMI_Handler+0x4>

08000d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <UsageFault_Handler+0x4>

08000dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dda:	f000 f933 	bl	8001044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b086      	sub	sp, #24
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	60f8      	str	r0, [r7, #12]
 8000dea:	60b9      	str	r1, [r7, #8]
 8000dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	e00a      	b.n	8000e0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000df4:	f3af 8000 	nop.w
 8000df8:	4601      	mov	r1, r0
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	60ba      	str	r2, [r7, #8]
 8000e00:	b2ca      	uxtb	r2, r1
 8000e02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	3301      	adds	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	dbf0      	blt.n	8000df4 <_read+0x12>
  }

  return len;
 8000e12:	687b      	ldr	r3, [r7, #4]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	60f8      	str	r0, [r7, #12]
 8000e24:	60b9      	str	r1, [r7, #8]
 8000e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	e009      	b.n	8000e42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1c5a      	adds	r2, r3, #1
 8000e32:	60ba      	str	r2, [r7, #8]
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	dbf1      	blt.n	8000e2e <_write+0x12>
  }
  return len;
 8000e4a:	687b      	ldr	r3, [r7, #4]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_close>:

int _close(int file)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e7c:	605a      	str	r2, [r3, #4]
  return 0;
 8000e7e:	2300      	movs	r3, #0
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <_isatty>:

int _isatty(int file)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e94:	2301      	movs	r3, #1
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b085      	sub	sp, #20
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec4:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <_sbrk+0x5c>)
 8000ec6:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <_sbrk+0x60>)
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <_sbrk+0x64>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <_sbrk+0x64>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <_sbrk+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <_sbrk+0x64>)
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	429a      	cmp	r2, r3
 8000eea:	d207      	bcs.n	8000efc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eec:	f003 fac4 	bl	8004478 <__errno>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e009      	b.n	8000f10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <_sbrk+0x64>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <_sbrk+0x64>)
 8000f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3718      	adds	r7, #24
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	20020000 	.word	0x20020000
 8000f1c:	00000400 	.word	0x00000400
 8000f20:	20000178 	.word	0x20000178
 8000f24:	200002d0 	.word	0x200002d0

08000f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f2c:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <SystemInit+0x20>)
 8000f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <SystemInit+0x20>)
 8000f34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f50:	f7ff ffea 	bl	8000f28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f003 fa83 	bl	8004484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fbed 	bl	800075c <main>
  bx  lr    
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000f90:	08004a14 	.word	0x08004a14
  ldr r2, =_sbss
 8000f94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000f98:	200002cc 	.word	0x200002cc

08000f9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe0 <HAL_Init+0x40>)
 8000faa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe0 <HAL_Init+0x40>)
 8000fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a07      	ldr	r2, [pc, #28]	@ (8000fe0 <HAL_Init+0x40>)
 8000fc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc8:	2003      	movs	r0, #3
 8000fca:	f000 f931 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fce:	2000      	movs	r0, #0
 8000fd0:	f000 f808 	bl	8000fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd4:	f7ff fdd6 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40023c00 	.word	0x40023c00

08000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fec:	4b12      	ldr	r3, [pc, #72]	@ (8001038 <HAL_InitTick+0x54>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b12      	ldr	r3, [pc, #72]	@ (800103c <HAL_InitTick+0x58>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f93b 	bl	800127e <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e00e      	b.n	8001030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d80a      	bhi.n	800102e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f000 f911 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001024:	4a06      	ldr	r2, [pc, #24]	@ (8001040 <HAL_InitTick+0x5c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102a:	2300      	movs	r3, #0
 800102c:	e000      	b.n	8001030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000000 	.word	0x20000000
 800103c:	20000008 	.word	0x20000008
 8001040:	20000004 	.word	0x20000004

08001044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <HAL_IncTick+0x20>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	461a      	mov	r2, r3
 800104e:	4b06      	ldr	r3, [pc, #24]	@ (8001068 <HAL_IncTick+0x24>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <HAL_IncTick+0x24>)
 8001056:	6013      	str	r3, [r2, #0]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008
 8001068:	2000017c 	.word	0x2000017c

0800106c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return uwTick;
 8001070:	4b03      	ldr	r3, [pc, #12]	@ (8001080 <HAL_GetTick+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
}
 8001074:	4618      	mov	r0, r3
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2000017c 	.word	0x2000017c

08001084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800108c:	f7ff ffee 	bl	800106c <HAL_GetTick>
 8001090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800109c:	d005      	beq.n	80010aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800109e:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <HAL_Delay+0x44>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010aa:	bf00      	nop
 80010ac:	f7ff ffde 	bl	800106c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	68fa      	ldr	r2, [r7, #12]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d8f7      	bhi.n	80010ac <HAL_Delay+0x28>
  {
  }
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fe:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	60d3      	str	r3, [r2, #12]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	@ (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	@ (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	@ (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	@ 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	@ 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	@ (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	@ (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff47 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff5c 	bl	8001114 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffb0 	bl	80011ec <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	@ 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	61fb      	str	r3, [r7, #28]
 80012b2:	e165      	b.n	8001580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b4:	2201      	movs	r2, #1
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	f040 8154 	bne.w	800157a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d005      	beq.n	80012ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d130      	bne.n	800134c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001320:	2201      	movs	r2, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	091b      	lsrs	r3, r3, #4
 8001336:	f003 0201 	and.w	r2, r3, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	4313      	orrs	r3, r2
 8001344:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 0303 	and.w	r3, r3, #3
 8001354:	2b03      	cmp	r3, #3
 8001356:	d017      	beq.n	8001388 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	2203      	movs	r2, #3
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4013      	ands	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d123      	bne.n	80013dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	08da      	lsrs	r2, r3, #3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3208      	adds	r2, #8
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	69b9      	ldr	r1, [r7, #24]
 80013d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 0203 	and.w	r2, r3, #3
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80ae 	beq.w	800157a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b5d      	ldr	r3, [pc, #372]	@ (8001598 <HAL_GPIO_Init+0x300>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001426:	4a5c      	ldr	r2, [pc, #368]	@ (8001598 <HAL_GPIO_Init+0x300>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142c:	6453      	str	r3, [r2, #68]	@ 0x44
 800142e:	4b5a      	ldr	r3, [pc, #360]	@ (8001598 <HAL_GPIO_Init+0x300>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800143a:	4a58      	ldr	r2, [pc, #352]	@ (800159c <HAL_GPIO_Init+0x304>)
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	3302      	adds	r3, #2
 8001442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	220f      	movs	r2, #15
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	69ba      	ldr	r2, [r7, #24]
 800145a:	4013      	ands	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4f      	ldr	r2, [pc, #316]	@ (80015a0 <HAL_GPIO_Init+0x308>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d025      	beq.n	80014b2 <HAL_GPIO_Init+0x21a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4e      	ldr	r2, [pc, #312]	@ (80015a4 <HAL_GPIO_Init+0x30c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d01f      	beq.n	80014ae <HAL_GPIO_Init+0x216>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a4d      	ldr	r2, [pc, #308]	@ (80015a8 <HAL_GPIO_Init+0x310>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d019      	beq.n	80014aa <HAL_GPIO_Init+0x212>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a4c      	ldr	r2, [pc, #304]	@ (80015ac <HAL_GPIO_Init+0x314>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d013      	beq.n	80014a6 <HAL_GPIO_Init+0x20e>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4a4b      	ldr	r2, [pc, #300]	@ (80015b0 <HAL_GPIO_Init+0x318>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d00d      	beq.n	80014a2 <HAL_GPIO_Init+0x20a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4a      	ldr	r2, [pc, #296]	@ (80015b4 <HAL_GPIO_Init+0x31c>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d007      	beq.n	800149e <HAL_GPIO_Init+0x206>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a49      	ldr	r2, [pc, #292]	@ (80015b8 <HAL_GPIO_Init+0x320>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d101      	bne.n	800149a <HAL_GPIO_Init+0x202>
 8001496:	2306      	movs	r3, #6
 8001498:	e00c      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 800149a:	2307      	movs	r3, #7
 800149c:	e00a      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 800149e:	2305      	movs	r3, #5
 80014a0:	e008      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 80014a2:	2304      	movs	r3, #4
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x21c>
 80014b2:	2300      	movs	r3, #0
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	f002 0203 	and.w	r2, r2, #3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c4:	4935      	ldr	r1, [pc, #212]	@ (800159c <HAL_GPIO_Init+0x304>)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d2:	4b3a      	ldr	r3, [pc, #232]	@ (80015bc <HAL_GPIO_Init+0x324>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f6:	4a31      	ldr	r2, [pc, #196]	@ (80015bc <HAL_GPIO_Init+0x324>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014fc:	4b2f      	ldr	r3, [pc, #188]	@ (80015bc <HAL_GPIO_Init+0x324>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001520:	4a26      	ldr	r2, [pc, #152]	@ (80015bc <HAL_GPIO_Init+0x324>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001526:	4b25      	ldr	r3, [pc, #148]	@ (80015bc <HAL_GPIO_Init+0x324>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800154a:	4a1c      	ldr	r2, [pc, #112]	@ (80015bc <HAL_GPIO_Init+0x324>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <HAL_GPIO_Init+0x324>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001574:	4a11      	ldr	r2, [pc, #68]	@ (80015bc <HAL_GPIO_Init+0x324>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	f67f ae96 	bls.w	80012b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40013800 	.word	0x40013800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40021400 	.word	0x40021400
 80015b8:	40021800 	.word	0x40021800
 80015bc:	40013c00 	.word	0x40013c00

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015dc:	e003      	b.n	80015e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	041a      	lsls	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e12b      	b.n	800185e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d106      	bne.n	8001620 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fada 	bl	8000bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2224      	movs	r2, #36	@ 0x24
 8001624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001646:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001656:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001658:	f001 f8b8 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 800165c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4a81      	ldr	r2, [pc, #516]	@ (8001868 <HAL_I2C_Init+0x274>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d807      	bhi.n	8001678 <HAL_I2C_Init+0x84>
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4a80      	ldr	r2, [pc, #512]	@ (800186c <HAL_I2C_Init+0x278>)
 800166c:	4293      	cmp	r3, r2
 800166e:	bf94      	ite	ls
 8001670:	2301      	movls	r3, #1
 8001672:	2300      	movhi	r3, #0
 8001674:	b2db      	uxtb	r3, r3
 8001676:	e006      	b.n	8001686 <HAL_I2C_Init+0x92>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	4a7d      	ldr	r2, [pc, #500]	@ (8001870 <HAL_I2C_Init+0x27c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	bf94      	ite	ls
 8001680:	2301      	movls	r3, #1
 8001682:	2300      	movhi	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e0e7      	b.n	800185e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4a78      	ldr	r2, [pc, #480]	@ (8001874 <HAL_I2C_Init+0x280>)
 8001692:	fba2 2303 	umull	r2, r3, r2, r3
 8001696:	0c9b      	lsrs	r3, r3, #18
 8001698:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001868 <HAL_I2C_Init+0x274>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d802      	bhi.n	80016c8 <HAL_I2C_Init+0xd4>
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	3301      	adds	r3, #1
 80016c6:	e009      	b.n	80016dc <HAL_I2C_Init+0xe8>
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ce:	fb02 f303 	mul.w	r3, r2, r3
 80016d2:	4a69      	ldr	r2, [pc, #420]	@ (8001878 <HAL_I2C_Init+0x284>)
 80016d4:	fba2 2303 	umull	r2, r3, r2, r3
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	3301      	adds	r3, #1
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	430b      	orrs	r3, r1
 80016e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	495c      	ldr	r1, [pc, #368]	@ (8001868 <HAL_I2C_Init+0x274>)
 80016f8:	428b      	cmp	r3, r1
 80016fa:	d819      	bhi.n	8001730 <HAL_I2C_Init+0x13c>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	1e59      	subs	r1, r3, #1
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	fbb1 f3f3 	udiv	r3, r1, r3
 800170a:	1c59      	adds	r1, r3, #1
 800170c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001710:	400b      	ands	r3, r1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00a      	beq.n	800172c <HAL_I2C_Init+0x138>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1e59      	subs	r1, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fbb1 f3f3 	udiv	r3, r1, r3
 8001724:	3301      	adds	r3, #1
 8001726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800172a:	e051      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 800172c:	2304      	movs	r3, #4
 800172e:	e04f      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d111      	bne.n	800175c <HAL_I2C_Init+0x168>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1e58      	subs	r0, r3, #1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6859      	ldr	r1, [r3, #4]
 8001740:	460b      	mov	r3, r1
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	440b      	add	r3, r1
 8001746:	fbb0 f3f3 	udiv	r3, r0, r3
 800174a:	3301      	adds	r3, #1
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001750:	2b00      	cmp	r3, #0
 8001752:	bf0c      	ite	eq
 8001754:	2301      	moveq	r3, #1
 8001756:	2300      	movne	r3, #0
 8001758:	b2db      	uxtb	r3, r3
 800175a:	e012      	b.n	8001782 <HAL_I2C_Init+0x18e>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	1e58      	subs	r0, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6859      	ldr	r1, [r3, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	440b      	add	r3, r1
 800176a:	0099      	lsls	r1, r3, #2
 800176c:	440b      	add	r3, r1
 800176e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001772:	3301      	adds	r3, #1
 8001774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001778:	2b00      	cmp	r3, #0
 800177a:	bf0c      	ite	eq
 800177c:	2301      	moveq	r3, #1
 800177e:	2300      	movne	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Init+0x196>
 8001786:	2301      	movs	r3, #1
 8001788:	e022      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10e      	bne.n	80017b0 <HAL_I2C_Init+0x1bc>
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1e58      	subs	r0, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6859      	ldr	r1, [r3, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	440b      	add	r3, r1
 80017a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80017a4:	3301      	adds	r3, #1
 80017a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ae:	e00f      	b.n	80017d0 <HAL_I2C_Init+0x1dc>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	1e58      	subs	r0, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	0099      	lsls	r1, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c6:	3301      	adds	r3, #1
 80017c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	6809      	ldr	r1, [r1, #0]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69da      	ldr	r2, [r3, #28]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6911      	ldr	r1, [r2, #16]
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	68d2      	ldr	r2, [r2, #12]
 800180a:	4311      	orrs	r1, r2
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6812      	ldr	r2, [r2, #0]
 8001810:	430b      	orrs	r3, r1
 8001812:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695a      	ldr	r2, [r3, #20]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f042 0201 	orr.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	000186a0 	.word	0x000186a0
 800186c:	001e847f 	.word	0x001e847f
 8001870:	003d08ff 	.word	0x003d08ff
 8001874:	431bde83 	.word	0x431bde83
 8001878:	10624dd3 	.word	0x10624dd3

0800187c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	461a      	mov	r2, r3
 8001888:	460b      	mov	r3, r1
 800188a:	817b      	strh	r3, [r7, #10]
 800188c:	4613      	mov	r3, r2
 800188e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001890:	f7ff fbec 	bl	800106c <HAL_GetTick>
 8001894:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b20      	cmp	r3, #32
 80018a0:	f040 80e0 	bne.w	8001a64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2319      	movs	r3, #25
 80018aa:	2201      	movs	r2, #1
 80018ac:	4970      	ldr	r1, [pc, #448]	@ (8001a70 <HAL_I2C_Master_Transmit+0x1f4>)
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 fc64 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018ba:	2302      	movs	r3, #2
 80018bc:	e0d3      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_I2C_Master_Transmit+0x50>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e0cc      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d007      	beq.n	80018f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f042 0201 	orr.w	r2, r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001900:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2221      	movs	r2, #33	@ 0x21
 8001906:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2210      	movs	r2, #16
 800190e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2200      	movs	r2, #0
 8001916:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	893a      	ldrh	r2, [r7, #8]
 8001922:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4a50      	ldr	r2, [pc, #320]	@ (8001a74 <HAL_I2C_Master_Transmit+0x1f8>)
 8001932:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001934:	8979      	ldrh	r1, [r7, #10]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	6a3a      	ldr	r2, [r7, #32]
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 face 	bl	8001edc <I2C_MasterRequestWrite>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e08d      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001960:	e066      	b.n	8001a30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	6a39      	ldr	r1, [r7, #32]
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fd22 	bl	80023b0 <I2C_WaitOnTXEFlagUntilTimeout>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00d      	beq.n	800198e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	2b04      	cmp	r3, #4
 8001978:	d107      	bne.n	800198a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001988:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06b      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	1c5a      	adds	r2, r3, #1
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	3b01      	subs	r3, #1
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019b6:	3b01      	subs	r3, #1
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d11b      	bne.n	8001a04 <HAL_I2C_Master_Transmit+0x188>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d017      	beq.n	8001a04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	781a      	ldrb	r2, [r3, #0]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	6a39      	ldr	r1, [r7, #32]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fd19 	bl	8002440 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00d      	beq.n	8001a30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d107      	bne.n	8001a2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e01a      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d194      	bne.n	8001962 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e000      	b.n	8001a66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a64:	2302      	movs	r3, #2
  }
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	00100002 	.word	0x00100002
 8001a74:	ffff0000 	.word	0xffff0000

08001a78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08c      	sub	sp, #48	@ 0x30
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	461a      	mov	r2, r3
 8001a84:	460b      	mov	r3, r1
 8001a86:	817b      	strh	r3, [r7, #10]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a8c:	f7ff faee 	bl	800106c <HAL_GetTick>
 8001a90:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b20      	cmp	r3, #32
 8001a9c:	f040 8217 	bne.w	8001ece <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	2319      	movs	r3, #25
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	497c      	ldr	r1, [pc, #496]	@ (8001c9c <HAL_I2C_Master_Receive+0x224>)
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fb66 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e20a      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_I2C_Master_Receive+0x50>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e203      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x458>
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d007      	beq.n	8001aee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f042 0201 	orr.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001afc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2222      	movs	r2, #34	@ 0x22
 8001b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2210      	movs	r2, #16
 8001b0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	893a      	ldrh	r2, [r7, #8]
 8001b1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ca0 <HAL_I2C_Master_Receive+0x228>)
 8001b2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b30:	8979      	ldrh	r1, [r7, #10]
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fa52 	bl	8001fe0 <I2C_MasterRequestRead>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e1c4      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d113      	bne.n	8001b76 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	623b      	str	r3, [r7, #32]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	623b      	str	r3, [r7, #32]
 8001b62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e198      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d11b      	bne.n	8001bb6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	e178      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d11b      	bne.n	8001bf6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bde:	2300      	movs	r3, #0
 8001be0:	61bb      	str	r3, [r7, #24]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	e158      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001c04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001c1c:	e144      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	f200 80f1 	bhi.w	8001e0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d123      	bne.n	8001c78 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fc4b 	bl	80024d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e145      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	1c5a      	adds	r2, r3, #1
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c60:	3b01      	subs	r3, #1
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c6c:	b29b      	uxth	r3, r3
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c76:	e117      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d14e      	bne.n	8001d1e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	9300      	str	r3, [sp, #0]
 8001c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c86:	2200      	movs	r2, #0
 8001c88:	4906      	ldr	r1, [pc, #24]	@ (8001ca4 <HAL_I2C_Master_Receive+0x22c>)
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 fa76 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d008      	beq.n	8001ca8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e11a      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x458>
 8001c9a:	bf00      	nop
 8001c9c:	00100002 	.word	0x00100002
 8001ca0:	ffff0000 	.word	0xffff0000
 8001ca4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	691a      	ldr	r2, [r3, #16]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	691a      	ldr	r2, [r3, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfc:	1c5a      	adds	r2, r3, #1
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b01      	subs	r3, #1
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001d1c:	e0c4      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d24:	2200      	movs	r2, #0
 8001d26:	496c      	ldr	r1, [pc, #432]	@ (8001ed8 <HAL_I2C_Master_Receive+0x460>)
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fa27 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0cb      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d64:	3b01      	subs	r3, #1
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d80:	2200      	movs	r2, #0
 8001d82:	4955      	ldr	r1, [pc, #340]	@ (8001ed8 <HAL_I2C_Master_Receive+0x460>)
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f9f9 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e09d      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e08:	e04e      	b.n	8001ea8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fb5e 	bl	80024d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e058      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e28:	b2d2      	uxtb	r2, r2
 8001e2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d124      	bne.n	8001ea8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e62:	2b03      	cmp	r3, #3
 8001e64:	d107      	bne.n	8001e76 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e74:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e92:	3b01      	subs	r3, #1
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	3b01      	subs	r3, #1
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f47f aeb6 	bne.w	8001c1e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001ece:	2302      	movs	r3, #2
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3728      	adds	r7, #40	@ 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	00010004 	.word	0x00010004

08001edc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b088      	sub	sp, #32
 8001ee0:	af02      	add	r7, sp, #8
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	607a      	str	r2, [r7, #4]
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b08      	cmp	r3, #8
 8001ef6:	d006      	beq.n	8001f06 <I2C_MasterRequestWrite+0x2a>
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d003      	beq.n	8001f06 <I2C_MasterRequestWrite+0x2a>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f04:	d108      	bne.n	8001f18 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e00b      	b.n	8001f30 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1c:	2b12      	cmp	r3, #18
 8001f1e:	d107      	bne.n	8001f30 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f91d 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00d      	beq.n	8001f64 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f56:	d103      	bne.n	8001f60 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e035      	b.n	8001fd0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f6c:	d108      	bne.n	8001f80 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f6e:	897b      	ldrh	r3, [r7, #10]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f7c:	611a      	str	r2, [r3, #16]
 8001f7e:	e01b      	b.n	8001fb8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f80:	897b      	ldrh	r3, [r7, #10]
 8001f82:	11db      	asrs	r3, r3, #7
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f003 0306 	and.w	r3, r3, #6
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f063 030f 	orn	r3, r3, #15
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	490e      	ldr	r1, [pc, #56]	@ (8001fd8 <I2C_MasterRequestWrite+0xfc>)
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f966 	bl	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e010      	b.n	8001fd0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fae:	897b      	ldrh	r3, [r7, #10]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4907      	ldr	r1, [pc, #28]	@ (8001fdc <I2C_MasterRequestWrite+0x100>)
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 f956 	bl	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e000      	b.n	8001fd0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	00010008 	.word	0x00010008
 8001fdc:	00010002 	.word	0x00010002

08001fe0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	460b      	mov	r3, r1
 8001fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002004:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b08      	cmp	r3, #8
 800200a:	d006      	beq.n	800201a <I2C_MasterRequestRead+0x3a>
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d003      	beq.n	800201a <I2C_MasterRequestRead+0x3a>
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002018:	d108      	bne.n	800202c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e00b      	b.n	8002044 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002030:	2b11      	cmp	r3, #17
 8002032:	d107      	bne.n	8002044 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002042:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f893 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00d      	beq.n	8002078 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800206a:	d103      	bne.n	8002074 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002072:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e079      	b.n	800216c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002080:	d108      	bne.n	8002094 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002082:	897b      	ldrh	r3, [r7, #10]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	b2da      	uxtb	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	611a      	str	r2, [r3, #16]
 8002092:	e05f      	b.n	8002154 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002094:	897b      	ldrh	r3, [r7, #10]
 8002096:	11db      	asrs	r3, r3, #7
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f003 0306 	and.w	r3, r3, #6
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f063 030f 	orn	r3, r3, #15
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	4930      	ldr	r1, [pc, #192]	@ (8002174 <I2C_MasterRequestRead+0x194>)
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 f8dc 	bl	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e054      	b.n	800216c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80020c2:	897b      	ldrh	r3, [r7, #10]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4929      	ldr	r1, [pc, #164]	@ (8002178 <I2C_MasterRequestRead+0x198>)
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 f8cc 	bl	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e044      	b.n	800216c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002106:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f000 f831 	bl	800217c <I2C_WaitOnFlagUntilTimeout>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00d      	beq.n	800213c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800212e:	d103      	bne.n	8002138 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002136:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e017      	b.n	800216c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800213c:	897b      	ldrh	r3, [r7, #10]
 800213e:	11db      	asrs	r3, r3, #7
 8002140:	b2db      	uxtb	r3, r3
 8002142:	f003 0306 	and.w	r3, r3, #6
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f063 030e 	orn	r3, r3, #14
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	4907      	ldr	r1, [pc, #28]	@ (8002178 <I2C_MasterRequestRead+0x198>)
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f888 	bl	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3718      	adds	r7, #24
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	00010008 	.word	0x00010008
 8002178:	00010002 	.word	0x00010002

0800217c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800218c:	e048      	b.n	8002220 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d044      	beq.n	8002220 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002196:	f7fe ff69 	bl	800106c <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d139      	bne.n	8002220 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10d      	bne.n	80021d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	43da      	mvns	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf0c      	ite	eq
 80021c8:	2301      	moveq	r3, #1
 80021ca:	2300      	movne	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	e00c      	b.n	80021ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	43da      	mvns	r2, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4013      	ands	r3, r2
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf0c      	ite	eq
 80021e4:	2301      	moveq	r3, #1
 80021e6:	2300      	movne	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	461a      	mov	r2, r3
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d116      	bne.n	8002220 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	f043 0220 	orr.w	r2, r3, #32
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e023      	b.n	8002268 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	0c1b      	lsrs	r3, r3, #16
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10d      	bne.n	8002246 <I2C_WaitOnFlagUntilTimeout+0xca>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	43da      	mvns	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	4013      	ands	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	bf0c      	ite	eq
 800223c:	2301      	moveq	r3, #1
 800223e:	2300      	movne	r3, #0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	e00c      	b.n	8002260 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	43da      	mvns	r2, r3
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	4013      	ands	r3, r2
 8002252:	b29b      	uxth	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	429a      	cmp	r2, r3
 8002264:	d093      	beq.n	800218e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
 800227c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800227e:	e071      	b.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800228e:	d123      	bne.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800229e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80022a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2200      	movs	r2, #0
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e067      	b.n	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022de:	d041      	beq.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022e0:	f7fe fec4 	bl	800106c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d302      	bcc.n	80022f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d136      	bne.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	0c1b      	lsrs	r3, r3, #16
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d10c      	bne.n	800231a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	43da      	mvns	r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4013      	ands	r3, r2
 800230c:	b29b      	uxth	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	bf14      	ite	ne
 8002312:	2301      	movne	r3, #1
 8002314:	2300      	moveq	r3, #0
 8002316:	b2db      	uxtb	r3, r3
 8002318:	e00b      	b.n	8002332 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	43da      	mvns	r2, r3
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	4013      	ands	r3, r2
 8002326:	b29b      	uxth	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	bf14      	ite	ne
 800232c:	2301      	movne	r3, #1
 800232e:	2300      	moveq	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d016      	beq.n	8002364 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2220      	movs	r2, #32
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002350:	f043 0220 	orr.w	r2, r3, #32
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e021      	b.n	80023a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10c      	bne.n	8002388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	43da      	mvns	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	4013      	ands	r3, r2
 800237a:	b29b      	uxth	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	e00b      	b.n	80023a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4013      	ands	r3, r2
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	bf14      	ite	ne
 800239a:	2301      	movne	r3, #1
 800239c:	2300      	moveq	r3, #0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f47f af6d 	bne.w	8002280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023bc:	e034      	b.n	8002428 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 f8e3 	bl	800258a <I2C_IsAcknowledgeFailed>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e034      	b.n	8002438 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d4:	d028      	beq.n	8002428 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d6:	f7fe fe49 	bl	800106c <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	68ba      	ldr	r2, [r7, #8]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d302      	bcc.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11d      	bne.n	8002428 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023f6:	2b80      	cmp	r3, #128	@ 0x80
 80023f8:	d016      	beq.n	8002428 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2220      	movs	r2, #32
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e007      	b.n	8002438 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002432:	2b80      	cmp	r3, #128	@ 0x80
 8002434:	d1c3      	bne.n	80023be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800244c:	e034      	b.n	80024b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 f89b 	bl	800258a <I2C_IsAcknowledgeFailed>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e034      	b.n	80024c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d028      	beq.n	80024b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002466:	f7fe fe01 	bl	800106c <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	429a      	cmp	r2, r3
 8002474:	d302      	bcc.n	800247c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d11d      	bne.n	80024b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b04      	cmp	r3, #4
 8002488:	d016      	beq.n	80024b8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e007      	b.n	80024c8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d1c3      	bne.n	800244e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80024dc:	e049      	b.n	8002572 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d119      	bne.n	8002520 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0210 	mvn.w	r2, #16
 80024f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2220      	movs	r2, #32
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e030      	b.n	8002582 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002520:	f7fe fda4 	bl	800106c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	429a      	cmp	r2, r3
 800252e:	d302      	bcc.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11d      	bne.n	8002572 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002540:	2b40      	cmp	r3, #64	@ 0x40
 8002542:	d016      	beq.n	8002572 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255e:	f043 0220 	orr.w	r2, r3, #32
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e007      	b.n	8002582 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800257c:	2b40      	cmp	r3, #64	@ 0x40
 800257e:	d1ae      	bne.n	80024de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695b      	ldr	r3, [r3, #20]
 8002598:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800259c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025a0:	d11b      	bne.n	80025da <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80025aa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c6:	f043 0204 	orr.w	r2, r3, #4
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0cc      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b68      	ldr	r3, [pc, #416]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d90c      	bls.n	8002624 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b65      	ldr	r3, [pc, #404]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b63      	ldr	r3, [pc, #396]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b8      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b59      	ldr	r3, [pc, #356]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	4a58      	ldr	r2, [pc, #352]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002642:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002646:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002654:	4b53      	ldr	r3, [pc, #332]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	4a52      	ldr	r2, [pc, #328]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800265e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b50      	ldr	r3, [pc, #320]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494d      	ldr	r1, [pc, #308]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d044      	beq.n	8002708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b47      	ldr	r3, [pc, #284]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d119      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d003      	beq.n	80026a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b3f      	ldr	r3, [pc, #252]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e06f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	4b3b      	ldr	r3, [pc, #236]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e067      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b37      	ldr	r3, [pc, #220]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4934      	ldr	r1, [pc, #208]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7fe fcc8 	bl	800106c <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7fe fcc4 	bl	800106c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e04f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b2b      	ldr	r3, [pc, #172]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b25      	ldr	r3, [pc, #148]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d20c      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b22      	ldr	r3, [pc, #136]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	b2d2      	uxtb	r2, r2
 800271c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b20      	ldr	r3, [pc, #128]	@ (80027a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 030f 	and.w	r3, r3, #15
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e032      	b.n	8002796 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b19      	ldr	r3, [pc, #100]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4916      	ldr	r1, [pc, #88]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	4313      	orrs	r3, r2
 800274c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275a:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490e      	ldr	r1, [pc, #56]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800276e:	f000 f855 	bl	800281c <HAL_RCC_GetSysClockFreq>
 8002772:	4602      	mov	r2, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	490a      	ldr	r1, [pc, #40]	@ (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002780:	5ccb      	ldrb	r3, [r1, r3]
 8002782:	fa22 f303 	lsr.w	r3, r2, r3
 8002786:	4a09      	ldr	r2, [pc, #36]	@ (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800278a:	4b09      	ldr	r3, [pc, #36]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fc28 	bl	8000fe4 <HAL_InitTick>

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023c00 	.word	0x40023c00
 80027a4:	40023800 	.word	0x40023800
 80027a8:	080049ec 	.word	0x080049ec
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000004 	.word	0x20000004

080027b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b8:	4b03      	ldr	r3, [pc, #12]	@ (80027c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80027ba:	681b      	ldr	r3, [r3, #0]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20000000 	.word	0x20000000

080027cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d0:	f7ff fff0 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	0a9b      	lsrs	r3, r3, #10
 80027dc:	f003 0307 	and.w	r3, r3, #7
 80027e0:	4903      	ldr	r1, [pc, #12]	@ (80027f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027e2:	5ccb      	ldrb	r3, [r1, r3]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40023800 	.word	0x40023800
 80027f0:	080049fc 	.word	0x080049fc

080027f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027f8:	f7ff ffdc 	bl	80027b4 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	0b5b      	lsrs	r3, r3, #13
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4903      	ldr	r1, [pc, #12]	@ (8002818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002810:	4618      	mov	r0, r3
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40023800 	.word	0x40023800
 8002818:	080049fc 	.word	0x080049fc

0800281c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800281c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002820:	b0ae      	sub	sp, #184	@ 0xb8
 8002822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800282a:	2300      	movs	r3, #0
 800282c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002842:	4bcb      	ldr	r3, [pc, #812]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b0c      	cmp	r3, #12
 800284c:	f200 8206 	bhi.w	8002c5c <HAL_RCC_GetSysClockFreq+0x440>
 8002850:	a201      	add	r2, pc, #4	@ (adr r2, 8002858 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	0800288d 	.word	0x0800288d
 800285c:	08002c5d 	.word	0x08002c5d
 8002860:	08002c5d 	.word	0x08002c5d
 8002864:	08002c5d 	.word	0x08002c5d
 8002868:	08002895 	.word	0x08002895
 800286c:	08002c5d 	.word	0x08002c5d
 8002870:	08002c5d 	.word	0x08002c5d
 8002874:	08002c5d 	.word	0x08002c5d
 8002878:	0800289d 	.word	0x0800289d
 800287c:	08002c5d 	.word	0x08002c5d
 8002880:	08002c5d 	.word	0x08002c5d
 8002884:	08002c5d 	.word	0x08002c5d
 8002888:	08002a8d 	.word	0x08002a8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800288c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b74 <HAL_RCC_GetSysClockFreq+0x358>)
 800288e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002892:	e1e7      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002894:	4bb8      	ldr	r3, [pc, #736]	@ (8002b78 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002896:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800289a:	e1e3      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800289c:	4bb4      	ldr	r3, [pc, #720]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x354>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028a8:	4bb1      	ldr	r3, [pc, #708]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x354>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d071      	beq.n	8002998 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028b4:	4bae      	ldr	r3, [pc, #696]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x354>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80028c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028d0:	2300      	movs	r3, #0
 80028d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028da:	4622      	mov	r2, r4
 80028dc:	462b      	mov	r3, r5
 80028de:	f04f 0000 	mov.w	r0, #0
 80028e2:	f04f 0100 	mov.w	r1, #0
 80028e6:	0159      	lsls	r1, r3, #5
 80028e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ec:	0150      	lsls	r0, r2, #5
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4621      	mov	r1, r4
 80028f4:	1a51      	subs	r1, r2, r1
 80028f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80028f8:	4629      	mov	r1, r5
 80028fa:	eb63 0301 	sbc.w	r3, r3, r1
 80028fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800290c:	4649      	mov	r1, r9
 800290e:	018b      	lsls	r3, r1, #6
 8002910:	4641      	mov	r1, r8
 8002912:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002916:	4641      	mov	r1, r8
 8002918:	018a      	lsls	r2, r1, #6
 800291a:	4641      	mov	r1, r8
 800291c:	1a51      	subs	r1, r2, r1
 800291e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002920:	4649      	mov	r1, r9
 8002922:	eb63 0301 	sbc.w	r3, r3, r1
 8002926:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002928:	f04f 0200 	mov.w	r2, #0
 800292c:	f04f 0300 	mov.w	r3, #0
 8002930:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002934:	4649      	mov	r1, r9
 8002936:	00cb      	lsls	r3, r1, #3
 8002938:	4641      	mov	r1, r8
 800293a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800293e:	4641      	mov	r1, r8
 8002940:	00ca      	lsls	r2, r1, #3
 8002942:	4610      	mov	r0, r2
 8002944:	4619      	mov	r1, r3
 8002946:	4603      	mov	r3, r0
 8002948:	4622      	mov	r2, r4
 800294a:	189b      	adds	r3, r3, r2
 800294c:	633b      	str	r3, [r7, #48]	@ 0x30
 800294e:	462b      	mov	r3, r5
 8002950:	460a      	mov	r2, r1
 8002952:	eb42 0303 	adc.w	r3, r2, r3
 8002956:	637b      	str	r3, [r7, #52]	@ 0x34
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002964:	4629      	mov	r1, r5
 8002966:	024b      	lsls	r3, r1, #9
 8002968:	4621      	mov	r1, r4
 800296a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800296e:	4621      	mov	r1, r4
 8002970:	024a      	lsls	r2, r1, #9
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800297a:	2200      	movs	r2, #0
 800297c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002980:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002984:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002988:	f7fd fc3c 	bl	8000204 <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002996:	e067      	b.n	8002a68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002998:	4b75      	ldr	r3, [pc, #468]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x354>)
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	099b      	lsrs	r3, r3, #6
 800299e:	2200      	movs	r2, #0
 80029a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80029a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80029a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80029ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029b2:	2300      	movs	r3, #0
 80029b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80029b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80029ba:	4622      	mov	r2, r4
 80029bc:	462b      	mov	r3, r5
 80029be:	f04f 0000 	mov.w	r0, #0
 80029c2:	f04f 0100 	mov.w	r1, #0
 80029c6:	0159      	lsls	r1, r3, #5
 80029c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029cc:	0150      	lsls	r0, r2, #5
 80029ce:	4602      	mov	r2, r0
 80029d0:	460b      	mov	r3, r1
 80029d2:	4621      	mov	r1, r4
 80029d4:	1a51      	subs	r1, r2, r1
 80029d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80029d8:	4629      	mov	r1, r5
 80029da:	eb63 0301 	sbc.w	r3, r3, r1
 80029de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029e0:	f04f 0200 	mov.w	r2, #0
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029ec:	4649      	mov	r1, r9
 80029ee:	018b      	lsls	r3, r1, #6
 80029f0:	4641      	mov	r1, r8
 80029f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029f6:	4641      	mov	r1, r8
 80029f8:	018a      	lsls	r2, r1, #6
 80029fa:	4641      	mov	r1, r8
 80029fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a00:	4649      	mov	r1, r9
 8002a02:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	f04f 0300 	mov.w	r3, #0
 8002a0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a1a:	4692      	mov	sl, r2
 8002a1c:	469b      	mov	fp, r3
 8002a1e:	4623      	mov	r3, r4
 8002a20:	eb1a 0303 	adds.w	r3, sl, r3
 8002a24:	623b      	str	r3, [r7, #32]
 8002a26:	462b      	mov	r3, r5
 8002a28:	eb4b 0303 	adc.w	r3, fp, r3
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002a3a:	4629      	mov	r1, r5
 8002a3c:	028b      	lsls	r3, r1, #10
 8002a3e:	4621      	mov	r1, r4
 8002a40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a44:	4621      	mov	r1, r4
 8002a46:	028a      	lsls	r2, r1, #10
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a50:	2200      	movs	r2, #0
 8002a52:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a54:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a5a:	f7fd fbd3 	bl	8000204 <__aeabi_uldivmod>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4613      	mov	r3, r2
 8002a64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a68:	4b41      	ldr	r3, [pc, #260]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	3301      	adds	r3, #1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a8a:	e0eb      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a8c:	4b38      	ldr	r3, [pc, #224]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a98:	4b35      	ldr	r3, [pc, #212]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d06b      	beq.n	8002b7c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aa4:	4b32      	ldr	r3, [pc, #200]	@ (8002b70 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	099b      	lsrs	r3, r3, #6
 8002aaa:	2200      	movs	r2, #0
 8002aac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ab6:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ab8:	2300      	movs	r3, #0
 8002aba:	667b      	str	r3, [r7, #100]	@ 0x64
 8002abc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	462b      	mov	r3, r5
 8002ac4:	f04f 0000 	mov.w	r0, #0
 8002ac8:	f04f 0100 	mov.w	r1, #0
 8002acc:	0159      	lsls	r1, r3, #5
 8002ace:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ad2:	0150      	lsls	r0, r2, #5
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4621      	mov	r1, r4
 8002ada:	1a51      	subs	r1, r2, r1
 8002adc:	61b9      	str	r1, [r7, #24]
 8002ade:	4629      	mov	r1, r5
 8002ae0:	eb63 0301 	sbc.w	r3, r3, r1
 8002ae4:	61fb      	str	r3, [r7, #28]
 8002ae6:	f04f 0200 	mov.w	r2, #0
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002af2:	4659      	mov	r1, fp
 8002af4:	018b      	lsls	r3, r1, #6
 8002af6:	4651      	mov	r1, sl
 8002af8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002afc:	4651      	mov	r1, sl
 8002afe:	018a      	lsls	r2, r1, #6
 8002b00:	4651      	mov	r1, sl
 8002b02:	ebb2 0801 	subs.w	r8, r2, r1
 8002b06:	4659      	mov	r1, fp
 8002b08:	eb63 0901 	sbc.w	r9, r3, r1
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	f04f 0300 	mov.w	r3, #0
 8002b14:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b18:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b1c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b20:	4690      	mov	r8, r2
 8002b22:	4699      	mov	r9, r3
 8002b24:	4623      	mov	r3, r4
 8002b26:	eb18 0303 	adds.w	r3, r8, r3
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	eb49 0303 	adc.w	r3, r9, r3
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002b40:	4629      	mov	r1, r5
 8002b42:	024b      	lsls	r3, r1, #9
 8002b44:	4621      	mov	r1, r4
 8002b46:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	024a      	lsls	r2, r1, #9
 8002b4e:	4610      	mov	r0, r2
 8002b50:	4619      	mov	r1, r3
 8002b52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b56:	2200      	movs	r2, #0
 8002b58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b5a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b60:	f7fd fb50 	bl	8000204 <__aeabi_uldivmod>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4613      	mov	r3, r2
 8002b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b6e:	e065      	b.n	8002c3c <HAL_RCC_GetSysClockFreq+0x420>
 8002b70:	40023800 	.word	0x40023800
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	099b      	lsrs	r3, r3, #6
 8002b82:	2200      	movs	r2, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	4611      	mov	r1, r2
 8002b88:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b8e:	2300      	movs	r3, #0
 8002b90:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b92:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b96:	4642      	mov	r2, r8
 8002b98:	464b      	mov	r3, r9
 8002b9a:	f04f 0000 	mov.w	r0, #0
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	0159      	lsls	r1, r3, #5
 8002ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba8:	0150      	lsls	r0, r2, #5
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4641      	mov	r1, r8
 8002bb0:	1a51      	subs	r1, r2, r1
 8002bb2:	60b9      	str	r1, [r7, #8]
 8002bb4:	4649      	mov	r1, r9
 8002bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002bc8:	4659      	mov	r1, fp
 8002bca:	018b      	lsls	r3, r1, #6
 8002bcc:	4651      	mov	r1, sl
 8002bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	018a      	lsls	r2, r1, #6
 8002bd6:	4651      	mov	r1, sl
 8002bd8:	1a54      	subs	r4, r2, r1
 8002bda:	4659      	mov	r1, fp
 8002bdc:	eb63 0501 	sbc.w	r5, r3, r1
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	00eb      	lsls	r3, r5, #3
 8002bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bee:	00e2      	lsls	r2, r4, #3
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	461d      	mov	r5, r3
 8002bf4:	4643      	mov	r3, r8
 8002bf6:	18e3      	adds	r3, r4, r3
 8002bf8:	603b      	str	r3, [r7, #0]
 8002bfa:	464b      	mov	r3, r9
 8002bfc:	eb45 0303 	adc.w	r3, r5, r3
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c0e:	4629      	mov	r1, r5
 8002c10:	028b      	lsls	r3, r1, #10
 8002c12:	4621      	mov	r1, r4
 8002c14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c18:	4621      	mov	r1, r4
 8002c1a:	028a      	lsls	r2, r1, #10
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c24:	2200      	movs	r2, #0
 8002c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c28:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c2a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002c2e:	f7fd fae9 	bl	8000204 <__aeabi_uldivmod>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4613      	mov	r3, r2
 8002c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x458>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	0f1b      	lsrs	r3, r3, #28
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c4e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c5a:	e003      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	37b8      	adds	r7, #184	@ 0xb8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	00f42400 	.word	0x00f42400

08002c7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e28d      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8083 	beq.w	8002da2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c9c:	4b94      	ldr	r3, [pc, #592]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d019      	beq.n	8002cdc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002ca8:	4b91      	ldr	r3, [pc, #580]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cb4:	4b8e      	ldr	r3, [pc, #568]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc0:	d00c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4b88      	ldr	r3, [pc, #544]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cda:	d10b      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	4b84      	ldr	r3, [pc, #528]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d05b      	beq.n	8002da0 <HAL_RCC_OscConfig+0x124>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d157      	bne.n	8002da0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e25a      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x90>
 8002cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7b      	ldr	r2, [pc, #492]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e01d      	b.n	8002d48 <HAL_RCC_OscConfig+0xcc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0xb4>
 8002d16:	4b76      	ldr	r3, [pc, #472]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a75      	ldr	r2, [pc, #468]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b73      	ldr	r3, [pc, #460]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a72      	ldr	r2, [pc, #456]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0xcc>
 8002d30:	4b6f      	ldr	r3, [pc, #444]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a6e      	ldr	r2, [pc, #440]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a6b      	ldr	r2, [pc, #428]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe f98c 	bl	800106c <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fe f988 	bl	800106c <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	@ 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e21f      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b61      	ldr	r3, [pc, #388]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0xdc>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe f978 	bl	800106c <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fe f974 	bl	800106c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	@ 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e20b      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	4b57      	ldr	r3, [pc, #348]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x104>
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d06f      	beq.n	8002e8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002dae:	4b50      	ldr	r3, [pc, #320]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d017      	beq.n	8002dea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dba:	4b4d      	ldr	r3, [pc, #308]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
        || \
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d105      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b47      	ldr	r3, [pc, #284]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d11c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b44      	ldr	r3, [pc, #272]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	4b41      	ldr	r3, [pc, #260]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x186>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e1d3      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e02:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4937      	ldr	r1, [pc, #220]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	e03a      	b.n	8002e8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e20:	4b34      	ldr	r3, [pc, #208]	@ (8002ef4 <HAL_RCC_OscConfig+0x278>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fe f921 	bl	800106c <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7fe f91d 	bl	800106c <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1b4      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	4b2b      	ldr	r3, [pc, #172]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4925      	ldr	r1, [pc, #148]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e62:	4b24      	ldr	r3, [pc, #144]	@ (8002ef4 <HAL_RCC_OscConfig+0x278>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe f900 	bl	800106c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e70:	f7fe f8fc 	bl	800106c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e193      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d036      	beq.n	8002f08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	4b15      	ldr	r3, [pc, #84]	@ (8002ef8 <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe f8e0 	bl	800106c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7fe f8dc 	bl	800106c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e173      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x234>
 8002ece:	e01b      	b.n	8002f08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed0:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe f8c9 	bl	800106c <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002edc:	e00e      	b.n	8002efc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ede:	f7fe f8c5 	bl	800106c <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d907      	bls.n	8002efc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e15c      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	42470000 	.word	0x42470000
 8002ef8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b8a      	ldr	r3, [pc, #552]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ea      	bne.n	8002ede <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8097 	beq.w	8003044 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b83      	ldr	r3, [pc, #524]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	4a7e      	ldr	r2, [pc, #504]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f36:	4b7c      	ldr	r3, [pc, #496]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b79      	ldr	r3, [pc, #484]	@ (800312c <HAL_RCC_OscConfig+0x4b0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b76      	ldr	r3, [pc, #472]	@ (800312c <HAL_RCC_OscConfig+0x4b0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a75      	ldr	r2, [pc, #468]	@ (800312c <HAL_RCC_OscConfig+0x4b0>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe f885 	bl	800106c <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fe f881 	bl	800106c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e118      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b6c      	ldr	r3, [pc, #432]	@ (800312c <HAL_RCC_OscConfig+0x4b0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x31e>
 8002f8c:	4b66      	ldr	r3, [pc, #408]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f90:	4a65      	ldr	r2, [pc, #404]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f98:	e01c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x358>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x340>
 8002fa2:	4b61      	ldr	r3, [pc, #388]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa6:	4a60      	ldr	r2, [pc, #384]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fae:	4b5e      	ldr	r3, [pc, #376]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	4a5d      	ldr	r2, [pc, #372]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x358>
 8002fbc:	4b5a      	ldr	r3, [pc, #360]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc0:	4a59      	ldr	r2, [pc, #356]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc8:	4b57      	ldr	r3, [pc, #348]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fcc:	4a56      	ldr	r2, [pc, #344]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fce:	f023 0304 	bic.w	r3, r3, #4
 8002fd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fe f846 	bl	800106c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fe f842 	bl	800106c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e0d7      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	4b4b      	ldr	r3, [pc, #300]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x368>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe f830 	bl	800106c <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fe f82c 	bl	800106c <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0c1      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003026:	4b40      	ldr	r3, [pc, #256]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ee      	bne.n	8003010 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003038:	4b3b      	ldr	r3, [pc, #236]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	4a3a      	ldr	r2, [pc, #232]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 800303e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003042:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80ad 	beq.w	80031a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304e:	4b36      	ldr	r3, [pc, #216]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b08      	cmp	r3, #8
 8003058:	d060      	beq.n	800311c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d145      	bne.n	80030ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b33      	ldr	r3, [pc, #204]	@ (8003130 <HAL_RCC_OscConfig+0x4b4>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe f800 	bl	800106c <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003070:	f7fd fffc 	bl	800106c <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e093      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b29      	ldr	r3, [pc, #164]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	3b01      	subs	r3, #1
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b8:	071b      	lsls	r3, r3, #28
 80030ba:	491b      	ldr	r1, [pc, #108]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <HAL_RCC_OscConfig+0x4b4>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fd ffd1 	bl	800106c <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fd ffcd 	bl	800106c <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e064      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e0:	4b11      	ldr	r3, [pc, #68]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x452>
 80030ec:	e05c      	b.n	80031a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ee:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <HAL_RCC_OscConfig+0x4b4>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fd ffba 	bl	800106c <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fd ffb6 	bl	800106c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e04d      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x480>
 800311a:	e045      	b.n	80031a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d107      	bne.n	8003134 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e040      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000
 8003130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003134:	4b1f      	ldr	r3, [pc, #124]	@ (80031b4 <HAL_RCC_OscConfig+0x538>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d030      	beq.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d129      	bne.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d122      	bne.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003164:	4013      	ands	r3, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800316a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800316c:	4293      	cmp	r3, r2
 800316e:	d119      	bne.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d10f      	bne.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800319e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800

080031b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07b      	b.n	80032c2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d108      	bne.n	80031e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031da:	d009      	beq.n	80031f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
 80031e2:	e005      	b.n	80031f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fd fd2a 	bl	8000c64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2202      	movs	r2, #2
 8003214:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003226:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003238:	431a      	orrs	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003260:	431a      	orrs	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003274:	ea42 0103 	orr.w	r1, r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800327c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f003 0104 	and.w	r1, r3, #4
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003296:	f003 0210 	and.w	r2, r3, #16
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b08a      	sub	sp, #40	@ 0x28
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032d8:	2301      	movs	r3, #1
 80032da:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032dc:	f7fd fec6 	bl	800106c <HAL_GetTick>
 80032e0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032e8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80032f0:	887b      	ldrh	r3, [r7, #2]
 80032f2:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032f4:	7ffb      	ldrb	r3, [r7, #31]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d00c      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x4a>
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003300:	d106      	bne.n	8003310 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <HAL_SPI_TransmitReceive+0x46>
 800330a:	7ffb      	ldrb	r3, [r7, #31]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d001      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003310:	2302      	movs	r3, #2
 8003312:	e17f      	b.n	8003614 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x5c>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x5c>
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e174      	b.n	8003614 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_SPI_TransmitReceive+0x6e>
 8003334:	2302      	movs	r3, #2
 8003336:	e16d      	b.n	8003614 <HAL_SPI_TransmitReceive+0x34a>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b04      	cmp	r3, #4
 800334a:	d003      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2205      	movs	r2, #5
 8003350:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	887a      	ldrh	r2, [r7, #2]
 8003376:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	887a      	ldrh	r2, [r7, #2]
 800337c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003394:	2b40      	cmp	r3, #64	@ 0x40
 8003396:	d007      	beq.n	80033a8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033b0:	d17e      	bne.n	80034b0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0xf6>
 80033ba:	8afb      	ldrh	r3, [r7, #22]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d16c      	bne.n	800349a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e4:	e059      	b.n	800349a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d11b      	bne.n	800342c <HAL_SPI_TransmitReceive+0x162>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_SPI_TransmitReceive+0x162>
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	2b01      	cmp	r3, #1
 8003402:	d113      	bne.n	800342c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003408:	881a      	ldrh	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003414:	1c9a      	adds	r2, r3, #2
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d119      	bne.n	800346e <HAL_SPI_TransmitReceive+0x1a4>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800343e:	b29b      	uxth	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	d014      	beq.n	800346e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344e:	b292      	uxth	r2, r2
 8003450:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003456:	1c9a      	adds	r2, r3, #2
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800346a:	2301      	movs	r3, #1
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800346e:	f7fd fdfd 	bl	800106c <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800347a:	429a      	cmp	r2, r3
 800347c:	d80d      	bhi.n	800349a <HAL_SPI_TransmitReceive+0x1d0>
 800347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003484:	d009      	beq.n	800349a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e0bc      	b.n	8003614 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1a0      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x11c>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d19b      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x11c>
 80034ae:	e082      	b.n	80035b6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <HAL_SPI_TransmitReceive+0x1f4>
 80034b8:	8afb      	ldrh	r3, [r7, #22]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d171      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	7812      	ldrb	r2, [r2, #0]
 80034ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034e4:	e05d      	b.n	80035a2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0302 	and.w	r3, r3, #2
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d11c      	bne.n	800352e <HAL_SPI_TransmitReceive+0x264>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d017      	beq.n	800352e <HAL_SPI_TransmitReceive+0x264>
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	2b01      	cmp	r3, #1
 8003502:	d114      	bne.n	800352e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	330c      	adds	r3, #12
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003516:	1c5a      	adds	r2, r3, #1
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b01      	cmp	r3, #1
 800353a:	d119      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x2a6>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d014      	beq.n	8003570 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68da      	ldr	r2, [r3, #12]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003550:	b2d2      	uxtb	r2, r2
 8003552:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	1c5a      	adds	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800356c:	2301      	movs	r3, #1
 800356e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003570:	f7fd fd7c 	bl	800106c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800357c:	429a      	cmp	r2, r3
 800357e:	d803      	bhi.n	8003588 <HAL_SPI_TransmitReceive+0x2be>
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d102      	bne.n	800358e <HAL_SPI_TransmitReceive+0x2c4>
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e038      	b.n	8003614 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d19c      	bne.n	80034e6 <HAL_SPI_TransmitReceive+0x21c>
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d197      	bne.n	80034e6 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f8b6 	bl	800372c <SPI_EndRxTxTransaction>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d008      	beq.n	80035d8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e01d      	b.n	8003614 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003612:	2300      	movs	r3, #0
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3728      	adds	r7, #40	@ 0x28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	603b      	str	r3, [r7, #0]
 8003628:	4613      	mov	r3, r2
 800362a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800362c:	f7fd fd1e 	bl	800106c <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	4413      	add	r3, r2
 800363a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800363c:	f7fd fd16 	bl	800106c <HAL_GetTick>
 8003640:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003642:	4b39      	ldr	r3, [pc, #228]	@ (8003728 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	015b      	lsls	r3, r3, #5
 8003648:	0d1b      	lsrs	r3, r3, #20
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	fb02 f303 	mul.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003652:	e054      	b.n	80036fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d050      	beq.n	80036fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800365c:	f7fd fd06 	bl	800106c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	429a      	cmp	r2, r3
 800366a:	d902      	bls.n	8003672 <SPI_WaitFlagStateUntilTimeout+0x56>
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d13d      	bne.n	80036ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003680:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800368a:	d111      	bne.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003694:	d004      	beq.n	80036a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800369e:	d107      	bne.n	80036b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036b8:	d10f      	bne.n	80036da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80036ea:	2303      	movs	r3, #3
 80036ec:	e017      	b.n	800371e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	429a      	cmp	r2, r3
 800370c:	bf0c      	ite	eq
 800370e:	2301      	moveq	r3, #1
 8003710:	2300      	movne	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	429a      	cmp	r2, r3
 800371a:	d19b      	bne.n	8003654 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3720      	adds	r7, #32
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000000 	.word	0x20000000

0800372c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2201      	movs	r2, #1
 8003740:	2102      	movs	r1, #2
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff ff6a 	bl	800361c <SPI_WaitFlagStateUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d007      	beq.n	800375e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e032      	b.n	80037c4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800375e:	4b1b      	ldr	r3, [pc, #108]	@ (80037cc <SPI_EndRxTxTransaction+0xa0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1b      	ldr	r2, [pc, #108]	@ (80037d0 <SPI_EndRxTxTransaction+0xa4>)
 8003764:	fba2 2303 	umull	r2, r3, r2, r3
 8003768:	0d5b      	lsrs	r3, r3, #21
 800376a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800376e:	fb02 f303 	mul.w	r3, r2, r3
 8003772:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800377c:	d112      	bne.n	80037a4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2200      	movs	r2, #0
 8003786:	2180      	movs	r1, #128	@ 0x80
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f7ff ff47 	bl	800361c <SPI_WaitFlagStateUntilTimeout>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d016      	beq.n	80037c2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003798:	f043 0220 	orr.w	r2, r3, #32
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e00f      	b.n	80037c4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ba:	2b80      	cmp	r3, #128	@ 0x80
 80037bc:	d0f2      	beq.n	80037a4 <SPI_EndRxTxTransaction+0x78>
 80037be:	e000      	b.n	80037c2 <SPI_EndRxTxTransaction+0x96>
        break;
 80037c0:	bf00      	nop
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000000 	.word	0x20000000
 80037d0:	165e9f81 	.word	0x165e9f81

080037d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e042      	b.n	800386c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7fd fa7a 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2224      	movs	r2, #36	@ 0x24
 8003804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f973 	bl	8003b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800382c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695a      	ldr	r2, [r3, #20]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800383c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800384c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b08a      	sub	sp, #40	@ 0x28
 8003878:	af02      	add	r7, sp, #8
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b20      	cmp	r3, #32
 8003892:	d175      	bne.n	8003980 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_UART_Transmit+0x2c>
 800389a:	88fb      	ldrh	r3, [r7, #6]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d101      	bne.n	80038a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e06e      	b.n	8003982 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2221      	movs	r2, #33	@ 0x21
 80038ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038b2:	f7fd fbdb 	bl	800106c <HAL_GetTick>
 80038b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	88fa      	ldrh	r2, [r7, #6]
 80038c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038cc:	d108      	bne.n	80038e0 <HAL_UART_Transmit+0x6c>
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d104      	bne.n	80038e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	61bb      	str	r3, [r7, #24]
 80038de:	e003      	b.n	80038e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038e8:	e02e      	b.n	8003948 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	2180      	movs	r1, #128	@ 0x80
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f848 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d005      	beq.n	800390c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e03a      	b.n	8003982 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10b      	bne.n	800392a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	461a      	mov	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003920:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	3302      	adds	r3, #2
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	e007      	b.n	800393a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	3301      	adds	r3, #1
 8003938:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800393e:	b29b      	uxth	r3, r3
 8003940:	3b01      	subs	r3, #1
 8003942:	b29a      	uxth	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1cb      	bne.n	80038ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	2200      	movs	r2, #0
 800395a:	2140      	movs	r1, #64	@ 0x40
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f000 f814 	bl	800398a <UART_WaitOnFlagUntilTimeout>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e006      	b.n	8003982 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2220      	movs	r2, #32
 8003978:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	e000      	b.n	8003982 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
  }
}
 8003982:	4618      	mov	r0, r3
 8003984:	3720      	adds	r7, #32
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b086      	sub	sp, #24
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800399a:	e03b      	b.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399c:	6a3b      	ldr	r3, [r7, #32]
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d037      	beq.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a4:	f7fd fb62 	bl	800106c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d302      	bcc.n	80039ba <UART_WaitOnFlagUntilTimeout+0x30>
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e03a      	b.n	8003a34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d023      	beq.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2b80      	cmp	r3, #128	@ 0x80
 80039d0:	d020      	beq.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b40      	cmp	r3, #64	@ 0x40
 80039d6:	d01d      	beq.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d116      	bne.n	8003a14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f81d 	bl	8003a3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2208      	movs	r2, #8
 8003a06:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e00f      	b.n	8003a34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	bf0c      	ite	eq
 8003a24:	2301      	moveq	r3, #1
 8003a26:	2300      	movne	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	79fb      	ldrb	r3, [r7, #7]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d0b4      	beq.n	800399c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b095      	sub	sp, #84	@ 0x54
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a64:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e5      	bne.n	8003a44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	3314      	adds	r3, #20
 8003a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3314      	adds	r3, #20
 8003a96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aa0:	e841 2300 	strex	r3, r2, [r1]
 8003aa4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1e5      	bne.n	8003a78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d119      	bne.n	8003ae8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f023 0310 	bic.w	r3, r3, #16
 8003aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ad4:	61ba      	str	r2, [r7, #24]
 8003ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6979      	ldr	r1, [r7, #20]
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e5      	bne.n	8003ab4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003af6:	bf00      	nop
 8003af8:	3754      	adds	r7, #84	@ 0x54
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
	...

08003b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b08:	b0c0      	sub	sp, #256	@ 0x100
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b20:	68d9      	ldr	r1, [r3, #12]
 8003b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	ea40 0301 	orr.w	r3, r0, r1
 8003b2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b5c:	f021 010c 	bic.w	r1, r1, #12
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7e:	6999      	ldr	r1, [r3, #24]
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	ea40 0301 	orr.w	r3, r0, r1
 8003b8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b8f      	ldr	r3, [pc, #572]	@ (8003dd0 <UART_SetConfig+0x2cc>)
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d005      	beq.n	8003ba4 <UART_SetConfig+0xa0>
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4b8d      	ldr	r3, [pc, #564]	@ (8003dd4 <UART_SetConfig+0x2d0>)
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d104      	bne.n	8003bae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ba4:	f7fe fe26 	bl	80027f4 <HAL_RCC_GetPCLK2Freq>
 8003ba8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bac:	e003      	b.n	8003bb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bae:	f7fe fe0d 	bl	80027cc <HAL_RCC_GetPCLK1Freq>
 8003bb2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bc0:	f040 810c 	bne.w	8003ddc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bd6:	4622      	mov	r2, r4
 8003bd8:	462b      	mov	r3, r5
 8003bda:	1891      	adds	r1, r2, r2
 8003bdc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bde:	415b      	adcs	r3, r3
 8003be0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003be2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003be6:	4621      	mov	r1, r4
 8003be8:	eb12 0801 	adds.w	r8, r2, r1
 8003bec:	4629      	mov	r1, r5
 8003bee:	eb43 0901 	adc.w	r9, r3, r1
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bfe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c06:	4690      	mov	r8, r2
 8003c08:	4699      	mov	r9, r3
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	eb18 0303 	adds.w	r3, r8, r3
 8003c10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c14:	462b      	mov	r3, r5
 8003c16:	eb49 0303 	adc.w	r3, r9, r3
 8003c1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c2a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c32:	460b      	mov	r3, r1
 8003c34:	18db      	adds	r3, r3, r3
 8003c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c38:	4613      	mov	r3, r2
 8003c3a:	eb42 0303 	adc.w	r3, r2, r3
 8003c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c40:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c44:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c48:	f7fc fadc 	bl	8000204 <__aeabi_uldivmod>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4b61      	ldr	r3, [pc, #388]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003c52:	fba3 2302 	umull	r2, r3, r3, r2
 8003c56:	095b      	lsrs	r3, r3, #5
 8003c58:	011c      	lsls	r4, r3, #4
 8003c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c64:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c68:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	1891      	adds	r1, r2, r2
 8003c72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c74:	415b      	adcs	r3, r3
 8003c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c78:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c82:	4649      	mov	r1, r9
 8003c84:	eb43 0b01 	adc.w	fp, r3, r1
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c94:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c98:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c9c:	4692      	mov	sl, r2
 8003c9e:	469b      	mov	fp, r3
 8003ca0:	4643      	mov	r3, r8
 8003ca2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003caa:	464b      	mov	r3, r9
 8003cac:	eb4b 0303 	adc.w	r3, fp, r3
 8003cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cc0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cc4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	18db      	adds	r3, r3, r3
 8003ccc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cce:	4613      	mov	r3, r2
 8003cd0:	eb42 0303 	adc.w	r3, r2, r3
 8003cd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cda:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cde:	f7fc fa91 	bl	8000204 <__aeabi_uldivmod>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003cea:	fba3 2301 	umull	r2, r3, r3, r1
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2264      	movs	r2, #100	@ 0x64
 8003cf2:	fb02 f303 	mul.w	r3, r2, r3
 8003cf6:	1acb      	subs	r3, r1, r3
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cfe:	4b36      	ldr	r3, [pc, #216]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003d00:	fba3 2302 	umull	r2, r3, r3, r2
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d0c:	441c      	add	r4, r3
 8003d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d18:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d1c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	1891      	adds	r1, r2, r2
 8003d26:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d30:	4641      	mov	r1, r8
 8003d32:	1851      	adds	r1, r2, r1
 8003d34:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d36:	4649      	mov	r1, r9
 8003d38:	414b      	adcs	r3, r1
 8003d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d48:	4659      	mov	r1, fp
 8003d4a:	00cb      	lsls	r3, r1, #3
 8003d4c:	4651      	mov	r1, sl
 8003d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d52:	4651      	mov	r1, sl
 8003d54:	00ca      	lsls	r2, r1, #3
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d64:	464b      	mov	r3, r9
 8003d66:	460a      	mov	r2, r1
 8003d68:	eb42 0303 	adc.w	r3, r2, r3
 8003d6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d7c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d80:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d84:	460b      	mov	r3, r1
 8003d86:	18db      	adds	r3, r3, r3
 8003d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	eb42 0303 	adc.w	r3, r2, r3
 8003d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d96:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d9a:	f7fc fa33 	bl	8000204 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	095b      	lsrs	r3, r3, #5
 8003daa:	2164      	movs	r1, #100	@ 0x64
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	3332      	adds	r3, #50	@ 0x32
 8003db6:	4a08      	ldr	r2, [pc, #32]	@ (8003dd8 <UART_SetConfig+0x2d4>)
 8003db8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	f003 0207 	and.w	r2, r3, #7
 8003dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4422      	add	r2, r4
 8003dca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dcc:	e106      	b.n	8003fdc <UART_SetConfig+0x4d8>
 8003dce:	bf00      	nop
 8003dd0:	40011000 	.word	0x40011000
 8003dd4:	40011400 	.word	0x40011400
 8003dd8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003de6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dee:	4642      	mov	r2, r8
 8003df0:	464b      	mov	r3, r9
 8003df2:	1891      	adds	r1, r2, r2
 8003df4:	6239      	str	r1, [r7, #32]
 8003df6:	415b      	adcs	r3, r3
 8003df8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dfe:	4641      	mov	r1, r8
 8003e00:	1854      	adds	r4, r2, r1
 8003e02:	4649      	mov	r1, r9
 8003e04:	eb43 0501 	adc.w	r5, r3, r1
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	00eb      	lsls	r3, r5, #3
 8003e12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e16:	00e2      	lsls	r2, r4, #3
 8003e18:	4614      	mov	r4, r2
 8003e1a:	461d      	mov	r5, r3
 8003e1c:	4643      	mov	r3, r8
 8003e1e:	18e3      	adds	r3, r4, r3
 8003e20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e24:	464b      	mov	r3, r9
 8003e26:	eb45 0303 	adc.w	r3, r5, r3
 8003e2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e3a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	f04f 0300 	mov.w	r3, #0
 8003e46:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	008b      	lsls	r3, r1, #2
 8003e4e:	4621      	mov	r1, r4
 8003e50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e54:	4621      	mov	r1, r4
 8003e56:	008a      	lsls	r2, r1, #2
 8003e58:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e5c:	f7fc f9d2 	bl	8000204 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4b60      	ldr	r3, [pc, #384]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003e66:	fba3 2302 	umull	r2, r3, r3, r2
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	011c      	lsls	r4, r3, #4
 8003e6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e78:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e7c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e80:	4642      	mov	r2, r8
 8003e82:	464b      	mov	r3, r9
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	61b9      	str	r1, [r7, #24]
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e90:	4641      	mov	r1, r8
 8003e92:	1851      	adds	r1, r2, r1
 8003e94:	6139      	str	r1, [r7, #16]
 8003e96:	4649      	mov	r1, r9
 8003e98:	414b      	adcs	r3, r1
 8003e9a:	617b      	str	r3, [r7, #20]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ea8:	4659      	mov	r1, fp
 8003eaa:	00cb      	lsls	r3, r1, #3
 8003eac:	4651      	mov	r1, sl
 8003eae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eb2:	4651      	mov	r1, sl
 8003eb4:	00ca      	lsls	r2, r1, #3
 8003eb6:	4610      	mov	r0, r2
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4642      	mov	r2, r8
 8003ebe:	189b      	adds	r3, r3, r2
 8003ec0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ec4:	464b      	mov	r3, r9
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	eb42 0303 	adc.w	r3, r2, r3
 8003ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eda:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	f04f 0300 	mov.w	r3, #0
 8003ee4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ee8:	4649      	mov	r1, r9
 8003eea:	008b      	lsls	r3, r1, #2
 8003eec:	4641      	mov	r1, r8
 8003eee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	008a      	lsls	r2, r1, #2
 8003ef6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003efa:	f7fc f983 	bl	8000204 <__aeabi_uldivmod>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4611      	mov	r1, r2
 8003f04:	4b38      	ldr	r3, [pc, #224]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003f06:	fba3 2301 	umull	r2, r3, r3, r1
 8003f0a:	095b      	lsrs	r3, r3, #5
 8003f0c:	2264      	movs	r2, #100	@ 0x64
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	1acb      	subs	r3, r1, r3
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	3332      	adds	r3, #50	@ 0x32
 8003f18:	4a33      	ldr	r2, [pc, #204]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1e:	095b      	lsrs	r3, r3, #5
 8003f20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f24:	441c      	add	r4, r3
 8003f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f2e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f34:	4642      	mov	r2, r8
 8003f36:	464b      	mov	r3, r9
 8003f38:	1891      	adds	r1, r2, r2
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	415b      	adcs	r3, r3
 8003f3e:	60fb      	str	r3, [r7, #12]
 8003f40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f44:	4641      	mov	r1, r8
 8003f46:	1851      	adds	r1, r2, r1
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	4649      	mov	r1, r9
 8003f4c:	414b      	adcs	r3, r1
 8003f4e:	607b      	str	r3, [r7, #4]
 8003f50:	f04f 0200 	mov.w	r2, #0
 8003f54:	f04f 0300 	mov.w	r3, #0
 8003f58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f5c:	4659      	mov	r1, fp
 8003f5e:	00cb      	lsls	r3, r1, #3
 8003f60:	4651      	mov	r1, sl
 8003f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f66:	4651      	mov	r1, sl
 8003f68:	00ca      	lsls	r2, r1, #3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4642      	mov	r2, r8
 8003f72:	189b      	adds	r3, r3, r2
 8003f74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f76:	464b      	mov	r3, r9
 8003f78:	460a      	mov	r2, r1
 8003f7a:	eb42 0303 	adc.w	r3, r2, r3
 8003f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f8a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f98:	4649      	mov	r1, r9
 8003f9a:	008b      	lsls	r3, r1, #2
 8003f9c:	4641      	mov	r1, r8
 8003f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	008a      	lsls	r2, r1, #2
 8003fa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003faa:	f7fc f92b 	bl	8000204 <__aeabi_uldivmod>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb8:	095b      	lsrs	r3, r3, #5
 8003fba:	2164      	movs	r1, #100	@ 0x64
 8003fbc:	fb01 f303 	mul.w	r3, r1, r3
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	3332      	adds	r3, #50	@ 0x32
 8003fc6:	4a08      	ldr	r2, [pc, #32]	@ (8003fe8 <UART_SetConfig+0x4e4>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	095b      	lsrs	r3, r3, #5
 8003fce:	f003 020f 	and.w	r2, r3, #15
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4422      	add	r2, r4
 8003fda:	609a      	str	r2, [r3, #8]
}
 8003fdc:	bf00      	nop
 8003fde:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe8:	51eb851f 	.word	0x51eb851f

08003fec <std>:
 8003fec:	2300      	movs	r3, #0
 8003fee:	b510      	push	{r4, lr}
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	e9c0 3300 	strd	r3, r3, [r0]
 8003ff6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ffa:	6083      	str	r3, [r0, #8]
 8003ffc:	8181      	strh	r1, [r0, #12]
 8003ffe:	6643      	str	r3, [r0, #100]	@ 0x64
 8004000:	81c2      	strh	r2, [r0, #14]
 8004002:	6183      	str	r3, [r0, #24]
 8004004:	4619      	mov	r1, r3
 8004006:	2208      	movs	r2, #8
 8004008:	305c      	adds	r0, #92	@ 0x5c
 800400a:	f000 f9e7 	bl	80043dc <memset>
 800400e:	4b0d      	ldr	r3, [pc, #52]	@ (8004044 <std+0x58>)
 8004010:	6263      	str	r3, [r4, #36]	@ 0x24
 8004012:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <std+0x5c>)
 8004014:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004016:	4b0d      	ldr	r3, [pc, #52]	@ (800404c <std+0x60>)
 8004018:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800401a:	4b0d      	ldr	r3, [pc, #52]	@ (8004050 <std+0x64>)
 800401c:	6323      	str	r3, [r4, #48]	@ 0x30
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <std+0x68>)
 8004020:	6224      	str	r4, [r4, #32]
 8004022:	429c      	cmp	r4, r3
 8004024:	d006      	beq.n	8004034 <std+0x48>
 8004026:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800402a:	4294      	cmp	r4, r2
 800402c:	d002      	beq.n	8004034 <std+0x48>
 800402e:	33d0      	adds	r3, #208	@ 0xd0
 8004030:	429c      	cmp	r4, r3
 8004032:	d105      	bne.n	8004040 <std+0x54>
 8004034:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800403c:	f000 ba46 	b.w	80044cc <__retarget_lock_init_recursive>
 8004040:	bd10      	pop	{r4, pc}
 8004042:	bf00      	nop
 8004044:	0800422d 	.word	0x0800422d
 8004048:	0800424f 	.word	0x0800424f
 800404c:	08004287 	.word	0x08004287
 8004050:	080042ab 	.word	0x080042ab
 8004054:	20000180 	.word	0x20000180

08004058 <stdio_exit_handler>:
 8004058:	4a02      	ldr	r2, [pc, #8]	@ (8004064 <stdio_exit_handler+0xc>)
 800405a:	4903      	ldr	r1, [pc, #12]	@ (8004068 <stdio_exit_handler+0x10>)
 800405c:	4803      	ldr	r0, [pc, #12]	@ (800406c <stdio_exit_handler+0x14>)
 800405e:	f000 b869 	b.w	8004134 <_fwalk_sglue>
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c
 8004068:	080047cd 	.word	0x080047cd
 800406c:	2000001c 	.word	0x2000001c

08004070 <cleanup_stdio>:
 8004070:	6841      	ldr	r1, [r0, #4]
 8004072:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <cleanup_stdio+0x34>)
 8004074:	4299      	cmp	r1, r3
 8004076:	b510      	push	{r4, lr}
 8004078:	4604      	mov	r4, r0
 800407a:	d001      	beq.n	8004080 <cleanup_stdio+0x10>
 800407c:	f000 fba6 	bl	80047cc <_fflush_r>
 8004080:	68a1      	ldr	r1, [r4, #8]
 8004082:	4b09      	ldr	r3, [pc, #36]	@ (80040a8 <cleanup_stdio+0x38>)
 8004084:	4299      	cmp	r1, r3
 8004086:	d002      	beq.n	800408e <cleanup_stdio+0x1e>
 8004088:	4620      	mov	r0, r4
 800408a:	f000 fb9f 	bl	80047cc <_fflush_r>
 800408e:	68e1      	ldr	r1, [r4, #12]
 8004090:	4b06      	ldr	r3, [pc, #24]	@ (80040ac <cleanup_stdio+0x3c>)
 8004092:	4299      	cmp	r1, r3
 8004094:	d004      	beq.n	80040a0 <cleanup_stdio+0x30>
 8004096:	4620      	mov	r0, r4
 8004098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800409c:	f000 bb96 	b.w	80047cc <_fflush_r>
 80040a0:	bd10      	pop	{r4, pc}
 80040a2:	bf00      	nop
 80040a4:	20000180 	.word	0x20000180
 80040a8:	200001e8 	.word	0x200001e8
 80040ac:	20000250 	.word	0x20000250

080040b0 <global_stdio_init.part.0>:
 80040b0:	b510      	push	{r4, lr}
 80040b2:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <global_stdio_init.part.0+0x30>)
 80040b4:	4c0b      	ldr	r4, [pc, #44]	@ (80040e4 <global_stdio_init.part.0+0x34>)
 80040b6:	4a0c      	ldr	r2, [pc, #48]	@ (80040e8 <global_stdio_init.part.0+0x38>)
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	4620      	mov	r0, r4
 80040bc:	2200      	movs	r2, #0
 80040be:	2104      	movs	r1, #4
 80040c0:	f7ff ff94 	bl	8003fec <std>
 80040c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80040c8:	2201      	movs	r2, #1
 80040ca:	2109      	movs	r1, #9
 80040cc:	f7ff ff8e 	bl	8003fec <std>
 80040d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80040d4:	2202      	movs	r2, #2
 80040d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040da:	2112      	movs	r1, #18
 80040dc:	f7ff bf86 	b.w	8003fec <std>
 80040e0:	200002b8 	.word	0x200002b8
 80040e4:	20000180 	.word	0x20000180
 80040e8:	08004059 	.word	0x08004059

080040ec <__sfp_lock_acquire>:
 80040ec:	4801      	ldr	r0, [pc, #4]	@ (80040f4 <__sfp_lock_acquire+0x8>)
 80040ee:	f000 b9ee 	b.w	80044ce <__retarget_lock_acquire_recursive>
 80040f2:	bf00      	nop
 80040f4:	200002c1 	.word	0x200002c1

080040f8 <__sfp_lock_release>:
 80040f8:	4801      	ldr	r0, [pc, #4]	@ (8004100 <__sfp_lock_release+0x8>)
 80040fa:	f000 b9e9 	b.w	80044d0 <__retarget_lock_release_recursive>
 80040fe:	bf00      	nop
 8004100:	200002c1 	.word	0x200002c1

08004104 <__sinit>:
 8004104:	b510      	push	{r4, lr}
 8004106:	4604      	mov	r4, r0
 8004108:	f7ff fff0 	bl	80040ec <__sfp_lock_acquire>
 800410c:	6a23      	ldr	r3, [r4, #32]
 800410e:	b11b      	cbz	r3, 8004118 <__sinit+0x14>
 8004110:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004114:	f7ff bff0 	b.w	80040f8 <__sfp_lock_release>
 8004118:	4b04      	ldr	r3, [pc, #16]	@ (800412c <__sinit+0x28>)
 800411a:	6223      	str	r3, [r4, #32]
 800411c:	4b04      	ldr	r3, [pc, #16]	@ (8004130 <__sinit+0x2c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1f5      	bne.n	8004110 <__sinit+0xc>
 8004124:	f7ff ffc4 	bl	80040b0 <global_stdio_init.part.0>
 8004128:	e7f2      	b.n	8004110 <__sinit+0xc>
 800412a:	bf00      	nop
 800412c:	08004071 	.word	0x08004071
 8004130:	200002b8 	.word	0x200002b8

08004134 <_fwalk_sglue>:
 8004134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004138:	4607      	mov	r7, r0
 800413a:	4688      	mov	r8, r1
 800413c:	4614      	mov	r4, r2
 800413e:	2600      	movs	r6, #0
 8004140:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004144:	f1b9 0901 	subs.w	r9, r9, #1
 8004148:	d505      	bpl.n	8004156 <_fwalk_sglue+0x22>
 800414a:	6824      	ldr	r4, [r4, #0]
 800414c:	2c00      	cmp	r4, #0
 800414e:	d1f7      	bne.n	8004140 <_fwalk_sglue+0xc>
 8004150:	4630      	mov	r0, r6
 8004152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004156:	89ab      	ldrh	r3, [r5, #12]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d907      	bls.n	800416c <_fwalk_sglue+0x38>
 800415c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004160:	3301      	adds	r3, #1
 8004162:	d003      	beq.n	800416c <_fwalk_sglue+0x38>
 8004164:	4629      	mov	r1, r5
 8004166:	4638      	mov	r0, r7
 8004168:	47c0      	blx	r8
 800416a:	4306      	orrs	r6, r0
 800416c:	3568      	adds	r5, #104	@ 0x68
 800416e:	e7e9      	b.n	8004144 <_fwalk_sglue+0x10>

08004170 <_puts_r>:
 8004170:	6a03      	ldr	r3, [r0, #32]
 8004172:	b570      	push	{r4, r5, r6, lr}
 8004174:	6884      	ldr	r4, [r0, #8]
 8004176:	4605      	mov	r5, r0
 8004178:	460e      	mov	r6, r1
 800417a:	b90b      	cbnz	r3, 8004180 <_puts_r+0x10>
 800417c:	f7ff ffc2 	bl	8004104 <__sinit>
 8004180:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004182:	07db      	lsls	r3, r3, #31
 8004184:	d405      	bmi.n	8004192 <_puts_r+0x22>
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	0598      	lsls	r0, r3, #22
 800418a:	d402      	bmi.n	8004192 <_puts_r+0x22>
 800418c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800418e:	f000 f99e 	bl	80044ce <__retarget_lock_acquire_recursive>
 8004192:	89a3      	ldrh	r3, [r4, #12]
 8004194:	0719      	lsls	r1, r3, #28
 8004196:	d502      	bpl.n	800419e <_puts_r+0x2e>
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d135      	bne.n	800420a <_puts_r+0x9a>
 800419e:	4621      	mov	r1, r4
 80041a0:	4628      	mov	r0, r5
 80041a2:	f000 f8c5 	bl	8004330 <__swsetup_r>
 80041a6:	b380      	cbz	r0, 800420a <_puts_r+0x9a>
 80041a8:	f04f 35ff 	mov.w	r5, #4294967295
 80041ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80041ae:	07da      	lsls	r2, r3, #31
 80041b0:	d405      	bmi.n	80041be <_puts_r+0x4e>
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	059b      	lsls	r3, r3, #22
 80041b6:	d402      	bmi.n	80041be <_puts_r+0x4e>
 80041b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80041ba:	f000 f989 	bl	80044d0 <__retarget_lock_release_recursive>
 80041be:	4628      	mov	r0, r5
 80041c0:	bd70      	pop	{r4, r5, r6, pc}
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	da04      	bge.n	80041d0 <_puts_r+0x60>
 80041c6:	69a2      	ldr	r2, [r4, #24]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	dc17      	bgt.n	80041fc <_puts_r+0x8c>
 80041cc:	290a      	cmp	r1, #10
 80041ce:	d015      	beq.n	80041fc <_puts_r+0x8c>
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	6022      	str	r2, [r4, #0]
 80041d6:	7019      	strb	r1, [r3, #0]
 80041d8:	68a3      	ldr	r3, [r4, #8]
 80041da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041de:	3b01      	subs	r3, #1
 80041e0:	60a3      	str	r3, [r4, #8]
 80041e2:	2900      	cmp	r1, #0
 80041e4:	d1ed      	bne.n	80041c2 <_puts_r+0x52>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da11      	bge.n	800420e <_puts_r+0x9e>
 80041ea:	4622      	mov	r2, r4
 80041ec:	210a      	movs	r1, #10
 80041ee:	4628      	mov	r0, r5
 80041f0:	f000 f85f 	bl	80042b2 <__swbuf_r>
 80041f4:	3001      	adds	r0, #1
 80041f6:	d0d7      	beq.n	80041a8 <_puts_r+0x38>
 80041f8:	250a      	movs	r5, #10
 80041fa:	e7d7      	b.n	80041ac <_puts_r+0x3c>
 80041fc:	4622      	mov	r2, r4
 80041fe:	4628      	mov	r0, r5
 8004200:	f000 f857 	bl	80042b2 <__swbuf_r>
 8004204:	3001      	adds	r0, #1
 8004206:	d1e7      	bne.n	80041d8 <_puts_r+0x68>
 8004208:	e7ce      	b.n	80041a8 <_puts_r+0x38>
 800420a:	3e01      	subs	r6, #1
 800420c:	e7e4      	b.n	80041d8 <_puts_r+0x68>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	6022      	str	r2, [r4, #0]
 8004214:	220a      	movs	r2, #10
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e7ee      	b.n	80041f8 <_puts_r+0x88>
	...

0800421c <puts>:
 800421c:	4b02      	ldr	r3, [pc, #8]	@ (8004228 <puts+0xc>)
 800421e:	4601      	mov	r1, r0
 8004220:	6818      	ldr	r0, [r3, #0]
 8004222:	f7ff bfa5 	b.w	8004170 <_puts_r>
 8004226:	bf00      	nop
 8004228:	20000018 	.word	0x20000018

0800422c <__sread>:
 800422c:	b510      	push	{r4, lr}
 800422e:	460c      	mov	r4, r1
 8004230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004234:	f000 f8fc 	bl	8004430 <_read_r>
 8004238:	2800      	cmp	r0, #0
 800423a:	bfab      	itete	ge
 800423c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800423e:	89a3      	ldrhlt	r3, [r4, #12]
 8004240:	181b      	addge	r3, r3, r0
 8004242:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004246:	bfac      	ite	ge
 8004248:	6563      	strge	r3, [r4, #84]	@ 0x54
 800424a:	81a3      	strhlt	r3, [r4, #12]
 800424c:	bd10      	pop	{r4, pc}

0800424e <__swrite>:
 800424e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004252:	461f      	mov	r7, r3
 8004254:	898b      	ldrh	r3, [r1, #12]
 8004256:	05db      	lsls	r3, r3, #23
 8004258:	4605      	mov	r5, r0
 800425a:	460c      	mov	r4, r1
 800425c:	4616      	mov	r6, r2
 800425e:	d505      	bpl.n	800426c <__swrite+0x1e>
 8004260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004264:	2302      	movs	r3, #2
 8004266:	2200      	movs	r2, #0
 8004268:	f000 f8d0 	bl	800440c <_lseek_r>
 800426c:	89a3      	ldrh	r3, [r4, #12]
 800426e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004272:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004276:	81a3      	strh	r3, [r4, #12]
 8004278:	4632      	mov	r2, r6
 800427a:	463b      	mov	r3, r7
 800427c:	4628      	mov	r0, r5
 800427e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004282:	f000 b8e7 	b.w	8004454 <_write_r>

08004286 <__sseek>:
 8004286:	b510      	push	{r4, lr}
 8004288:	460c      	mov	r4, r1
 800428a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800428e:	f000 f8bd 	bl	800440c <_lseek_r>
 8004292:	1c43      	adds	r3, r0, #1
 8004294:	89a3      	ldrh	r3, [r4, #12]
 8004296:	bf15      	itete	ne
 8004298:	6560      	strne	r0, [r4, #84]	@ 0x54
 800429a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800429e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80042a2:	81a3      	strheq	r3, [r4, #12]
 80042a4:	bf18      	it	ne
 80042a6:	81a3      	strhne	r3, [r4, #12]
 80042a8:	bd10      	pop	{r4, pc}

080042aa <__sclose>:
 80042aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042ae:	f000 b89d 	b.w	80043ec <_close_r>

080042b2 <__swbuf_r>:
 80042b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b4:	460e      	mov	r6, r1
 80042b6:	4614      	mov	r4, r2
 80042b8:	4605      	mov	r5, r0
 80042ba:	b118      	cbz	r0, 80042c4 <__swbuf_r+0x12>
 80042bc:	6a03      	ldr	r3, [r0, #32]
 80042be:	b90b      	cbnz	r3, 80042c4 <__swbuf_r+0x12>
 80042c0:	f7ff ff20 	bl	8004104 <__sinit>
 80042c4:	69a3      	ldr	r3, [r4, #24]
 80042c6:	60a3      	str	r3, [r4, #8]
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	071a      	lsls	r2, r3, #28
 80042cc:	d501      	bpl.n	80042d2 <__swbuf_r+0x20>
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	b943      	cbnz	r3, 80042e4 <__swbuf_r+0x32>
 80042d2:	4621      	mov	r1, r4
 80042d4:	4628      	mov	r0, r5
 80042d6:	f000 f82b 	bl	8004330 <__swsetup_r>
 80042da:	b118      	cbz	r0, 80042e4 <__swbuf_r+0x32>
 80042dc:	f04f 37ff 	mov.w	r7, #4294967295
 80042e0:	4638      	mov	r0, r7
 80042e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	6922      	ldr	r2, [r4, #16]
 80042e8:	1a98      	subs	r0, r3, r2
 80042ea:	6963      	ldr	r3, [r4, #20]
 80042ec:	b2f6      	uxtb	r6, r6
 80042ee:	4283      	cmp	r3, r0
 80042f0:	4637      	mov	r7, r6
 80042f2:	dc05      	bgt.n	8004300 <__swbuf_r+0x4e>
 80042f4:	4621      	mov	r1, r4
 80042f6:	4628      	mov	r0, r5
 80042f8:	f000 fa68 	bl	80047cc <_fflush_r>
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d1ed      	bne.n	80042dc <__swbuf_r+0x2a>
 8004300:	68a3      	ldr	r3, [r4, #8]
 8004302:	3b01      	subs	r3, #1
 8004304:	60a3      	str	r3, [r4, #8]
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	6022      	str	r2, [r4, #0]
 800430c:	701e      	strb	r6, [r3, #0]
 800430e:	6962      	ldr	r2, [r4, #20]
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	429a      	cmp	r2, r3
 8004314:	d004      	beq.n	8004320 <__swbuf_r+0x6e>
 8004316:	89a3      	ldrh	r3, [r4, #12]
 8004318:	07db      	lsls	r3, r3, #31
 800431a:	d5e1      	bpl.n	80042e0 <__swbuf_r+0x2e>
 800431c:	2e0a      	cmp	r6, #10
 800431e:	d1df      	bne.n	80042e0 <__swbuf_r+0x2e>
 8004320:	4621      	mov	r1, r4
 8004322:	4628      	mov	r0, r5
 8004324:	f000 fa52 	bl	80047cc <_fflush_r>
 8004328:	2800      	cmp	r0, #0
 800432a:	d0d9      	beq.n	80042e0 <__swbuf_r+0x2e>
 800432c:	e7d6      	b.n	80042dc <__swbuf_r+0x2a>
	...

08004330 <__swsetup_r>:
 8004330:	b538      	push	{r3, r4, r5, lr}
 8004332:	4b29      	ldr	r3, [pc, #164]	@ (80043d8 <__swsetup_r+0xa8>)
 8004334:	4605      	mov	r5, r0
 8004336:	6818      	ldr	r0, [r3, #0]
 8004338:	460c      	mov	r4, r1
 800433a:	b118      	cbz	r0, 8004344 <__swsetup_r+0x14>
 800433c:	6a03      	ldr	r3, [r0, #32]
 800433e:	b90b      	cbnz	r3, 8004344 <__swsetup_r+0x14>
 8004340:	f7ff fee0 	bl	8004104 <__sinit>
 8004344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004348:	0719      	lsls	r1, r3, #28
 800434a:	d422      	bmi.n	8004392 <__swsetup_r+0x62>
 800434c:	06da      	lsls	r2, r3, #27
 800434e:	d407      	bmi.n	8004360 <__swsetup_r+0x30>
 8004350:	2209      	movs	r2, #9
 8004352:	602a      	str	r2, [r5, #0]
 8004354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004358:	81a3      	strh	r3, [r4, #12]
 800435a:	f04f 30ff 	mov.w	r0, #4294967295
 800435e:	e033      	b.n	80043c8 <__swsetup_r+0x98>
 8004360:	0758      	lsls	r0, r3, #29
 8004362:	d512      	bpl.n	800438a <__swsetup_r+0x5a>
 8004364:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004366:	b141      	cbz	r1, 800437a <__swsetup_r+0x4a>
 8004368:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800436c:	4299      	cmp	r1, r3
 800436e:	d002      	beq.n	8004376 <__swsetup_r+0x46>
 8004370:	4628      	mov	r0, r5
 8004372:	f000 f8af 	bl	80044d4 <_free_r>
 8004376:	2300      	movs	r3, #0
 8004378:	6363      	str	r3, [r4, #52]	@ 0x34
 800437a:	89a3      	ldrh	r3, [r4, #12]
 800437c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004380:	81a3      	strh	r3, [r4, #12]
 8004382:	2300      	movs	r3, #0
 8004384:	6063      	str	r3, [r4, #4]
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	6023      	str	r3, [r4, #0]
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	f043 0308 	orr.w	r3, r3, #8
 8004390:	81a3      	strh	r3, [r4, #12]
 8004392:	6923      	ldr	r3, [r4, #16]
 8004394:	b94b      	cbnz	r3, 80043aa <__swsetup_r+0x7a>
 8004396:	89a3      	ldrh	r3, [r4, #12]
 8004398:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800439c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043a0:	d003      	beq.n	80043aa <__swsetup_r+0x7a>
 80043a2:	4621      	mov	r1, r4
 80043a4:	4628      	mov	r0, r5
 80043a6:	f000 fa5f 	bl	8004868 <__smakebuf_r>
 80043aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ae:	f013 0201 	ands.w	r2, r3, #1
 80043b2:	d00a      	beq.n	80043ca <__swsetup_r+0x9a>
 80043b4:	2200      	movs	r2, #0
 80043b6:	60a2      	str	r2, [r4, #8]
 80043b8:	6962      	ldr	r2, [r4, #20]
 80043ba:	4252      	negs	r2, r2
 80043bc:	61a2      	str	r2, [r4, #24]
 80043be:	6922      	ldr	r2, [r4, #16]
 80043c0:	b942      	cbnz	r2, 80043d4 <__swsetup_r+0xa4>
 80043c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80043c6:	d1c5      	bne.n	8004354 <__swsetup_r+0x24>
 80043c8:	bd38      	pop	{r3, r4, r5, pc}
 80043ca:	0799      	lsls	r1, r3, #30
 80043cc:	bf58      	it	pl
 80043ce:	6962      	ldrpl	r2, [r4, #20]
 80043d0:	60a2      	str	r2, [r4, #8]
 80043d2:	e7f4      	b.n	80043be <__swsetup_r+0x8e>
 80043d4:	2000      	movs	r0, #0
 80043d6:	e7f7      	b.n	80043c8 <__swsetup_r+0x98>
 80043d8:	20000018 	.word	0x20000018

080043dc <memset>:
 80043dc:	4402      	add	r2, r0
 80043de:	4603      	mov	r3, r0
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d100      	bne.n	80043e6 <memset+0xa>
 80043e4:	4770      	bx	lr
 80043e6:	f803 1b01 	strb.w	r1, [r3], #1
 80043ea:	e7f9      	b.n	80043e0 <memset+0x4>

080043ec <_close_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4d06      	ldr	r5, [pc, #24]	@ (8004408 <_close_r+0x1c>)
 80043f0:	2300      	movs	r3, #0
 80043f2:	4604      	mov	r4, r0
 80043f4:	4608      	mov	r0, r1
 80043f6:	602b      	str	r3, [r5, #0]
 80043f8:	f7fc fd2c 	bl	8000e54 <_close>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_close_r+0x1a>
 8004400:	682b      	ldr	r3, [r5, #0]
 8004402:	b103      	cbz	r3, 8004406 <_close_r+0x1a>
 8004404:	6023      	str	r3, [r4, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	200002bc 	.word	0x200002bc

0800440c <_lseek_r>:
 800440c:	b538      	push	{r3, r4, r5, lr}
 800440e:	4d07      	ldr	r5, [pc, #28]	@ (800442c <_lseek_r+0x20>)
 8004410:	4604      	mov	r4, r0
 8004412:	4608      	mov	r0, r1
 8004414:	4611      	mov	r1, r2
 8004416:	2200      	movs	r2, #0
 8004418:	602a      	str	r2, [r5, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	f7fc fd41 	bl	8000ea2 <_lseek>
 8004420:	1c43      	adds	r3, r0, #1
 8004422:	d102      	bne.n	800442a <_lseek_r+0x1e>
 8004424:	682b      	ldr	r3, [r5, #0]
 8004426:	b103      	cbz	r3, 800442a <_lseek_r+0x1e>
 8004428:	6023      	str	r3, [r4, #0]
 800442a:	bd38      	pop	{r3, r4, r5, pc}
 800442c:	200002bc 	.word	0x200002bc

08004430 <_read_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	4d07      	ldr	r5, [pc, #28]	@ (8004450 <_read_r+0x20>)
 8004434:	4604      	mov	r4, r0
 8004436:	4608      	mov	r0, r1
 8004438:	4611      	mov	r1, r2
 800443a:	2200      	movs	r2, #0
 800443c:	602a      	str	r2, [r5, #0]
 800443e:	461a      	mov	r2, r3
 8004440:	f7fc fccf 	bl	8000de2 <_read>
 8004444:	1c43      	adds	r3, r0, #1
 8004446:	d102      	bne.n	800444e <_read_r+0x1e>
 8004448:	682b      	ldr	r3, [r5, #0]
 800444a:	b103      	cbz	r3, 800444e <_read_r+0x1e>
 800444c:	6023      	str	r3, [r4, #0]
 800444e:	bd38      	pop	{r3, r4, r5, pc}
 8004450:	200002bc 	.word	0x200002bc

08004454 <_write_r>:
 8004454:	b538      	push	{r3, r4, r5, lr}
 8004456:	4d07      	ldr	r5, [pc, #28]	@ (8004474 <_write_r+0x20>)
 8004458:	4604      	mov	r4, r0
 800445a:	4608      	mov	r0, r1
 800445c:	4611      	mov	r1, r2
 800445e:	2200      	movs	r2, #0
 8004460:	602a      	str	r2, [r5, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	f7fc fcda 	bl	8000e1c <_write>
 8004468:	1c43      	adds	r3, r0, #1
 800446a:	d102      	bne.n	8004472 <_write_r+0x1e>
 800446c:	682b      	ldr	r3, [r5, #0]
 800446e:	b103      	cbz	r3, 8004472 <_write_r+0x1e>
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	bd38      	pop	{r3, r4, r5, pc}
 8004474:	200002bc 	.word	0x200002bc

08004478 <__errno>:
 8004478:	4b01      	ldr	r3, [pc, #4]	@ (8004480 <__errno+0x8>)
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000018 	.word	0x20000018

08004484 <__libc_init_array>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	4d0d      	ldr	r5, [pc, #52]	@ (80044bc <__libc_init_array+0x38>)
 8004488:	4c0d      	ldr	r4, [pc, #52]	@ (80044c0 <__libc_init_array+0x3c>)
 800448a:	1b64      	subs	r4, r4, r5
 800448c:	10a4      	asrs	r4, r4, #2
 800448e:	2600      	movs	r6, #0
 8004490:	42a6      	cmp	r6, r4
 8004492:	d109      	bne.n	80044a8 <__libc_init_array+0x24>
 8004494:	4d0b      	ldr	r5, [pc, #44]	@ (80044c4 <__libc_init_array+0x40>)
 8004496:	4c0c      	ldr	r4, [pc, #48]	@ (80044c8 <__libc_init_array+0x44>)
 8004498:	f000 fa54 	bl	8004944 <_init>
 800449c:	1b64      	subs	r4, r4, r5
 800449e:	10a4      	asrs	r4, r4, #2
 80044a0:	2600      	movs	r6, #0
 80044a2:	42a6      	cmp	r6, r4
 80044a4:	d105      	bne.n	80044b2 <__libc_init_array+0x2e>
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ac:	4798      	blx	r3
 80044ae:	3601      	adds	r6, #1
 80044b0:	e7ee      	b.n	8004490 <__libc_init_array+0xc>
 80044b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b6:	4798      	blx	r3
 80044b8:	3601      	adds	r6, #1
 80044ba:	e7f2      	b.n	80044a2 <__libc_init_array+0x1e>
 80044bc:	08004a0c 	.word	0x08004a0c
 80044c0:	08004a0c 	.word	0x08004a0c
 80044c4:	08004a0c 	.word	0x08004a0c
 80044c8:	08004a10 	.word	0x08004a10

080044cc <__retarget_lock_init_recursive>:
 80044cc:	4770      	bx	lr

080044ce <__retarget_lock_acquire_recursive>:
 80044ce:	4770      	bx	lr

080044d0 <__retarget_lock_release_recursive>:
 80044d0:	4770      	bx	lr
	...

080044d4 <_free_r>:
 80044d4:	b538      	push	{r3, r4, r5, lr}
 80044d6:	4605      	mov	r5, r0
 80044d8:	2900      	cmp	r1, #0
 80044da:	d041      	beq.n	8004560 <_free_r+0x8c>
 80044dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e0:	1f0c      	subs	r4, r1, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfb8      	it	lt
 80044e6:	18e4      	addlt	r4, r4, r3
 80044e8:	f000 f8e0 	bl	80046ac <__malloc_lock>
 80044ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004564 <_free_r+0x90>)
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	b933      	cbnz	r3, 8004500 <_free_r+0x2c>
 80044f2:	6063      	str	r3, [r4, #4]
 80044f4:	6014      	str	r4, [r2, #0]
 80044f6:	4628      	mov	r0, r5
 80044f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044fc:	f000 b8dc 	b.w	80046b8 <__malloc_unlock>
 8004500:	42a3      	cmp	r3, r4
 8004502:	d908      	bls.n	8004516 <_free_r+0x42>
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	1821      	adds	r1, r4, r0
 8004508:	428b      	cmp	r3, r1
 800450a:	bf01      	itttt	eq
 800450c:	6819      	ldreq	r1, [r3, #0]
 800450e:	685b      	ldreq	r3, [r3, #4]
 8004510:	1809      	addeq	r1, r1, r0
 8004512:	6021      	streq	r1, [r4, #0]
 8004514:	e7ed      	b.n	80044f2 <_free_r+0x1e>
 8004516:	461a      	mov	r2, r3
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	b10b      	cbz	r3, 8004520 <_free_r+0x4c>
 800451c:	42a3      	cmp	r3, r4
 800451e:	d9fa      	bls.n	8004516 <_free_r+0x42>
 8004520:	6811      	ldr	r1, [r2, #0]
 8004522:	1850      	adds	r0, r2, r1
 8004524:	42a0      	cmp	r0, r4
 8004526:	d10b      	bne.n	8004540 <_free_r+0x6c>
 8004528:	6820      	ldr	r0, [r4, #0]
 800452a:	4401      	add	r1, r0
 800452c:	1850      	adds	r0, r2, r1
 800452e:	4283      	cmp	r3, r0
 8004530:	6011      	str	r1, [r2, #0]
 8004532:	d1e0      	bne.n	80044f6 <_free_r+0x22>
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	6053      	str	r3, [r2, #4]
 800453a:	4408      	add	r0, r1
 800453c:	6010      	str	r0, [r2, #0]
 800453e:	e7da      	b.n	80044f6 <_free_r+0x22>
 8004540:	d902      	bls.n	8004548 <_free_r+0x74>
 8004542:	230c      	movs	r3, #12
 8004544:	602b      	str	r3, [r5, #0]
 8004546:	e7d6      	b.n	80044f6 <_free_r+0x22>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	1821      	adds	r1, r4, r0
 800454c:	428b      	cmp	r3, r1
 800454e:	bf04      	itt	eq
 8004550:	6819      	ldreq	r1, [r3, #0]
 8004552:	685b      	ldreq	r3, [r3, #4]
 8004554:	6063      	str	r3, [r4, #4]
 8004556:	bf04      	itt	eq
 8004558:	1809      	addeq	r1, r1, r0
 800455a:	6021      	streq	r1, [r4, #0]
 800455c:	6054      	str	r4, [r2, #4]
 800455e:	e7ca      	b.n	80044f6 <_free_r+0x22>
 8004560:	bd38      	pop	{r3, r4, r5, pc}
 8004562:	bf00      	nop
 8004564:	200002c8 	.word	0x200002c8

08004568 <sbrk_aligned>:
 8004568:	b570      	push	{r4, r5, r6, lr}
 800456a:	4e0f      	ldr	r6, [pc, #60]	@ (80045a8 <sbrk_aligned+0x40>)
 800456c:	460c      	mov	r4, r1
 800456e:	6831      	ldr	r1, [r6, #0]
 8004570:	4605      	mov	r5, r0
 8004572:	b911      	cbnz	r1, 800457a <sbrk_aligned+0x12>
 8004574:	f000 f9d6 	bl	8004924 <_sbrk_r>
 8004578:	6030      	str	r0, [r6, #0]
 800457a:	4621      	mov	r1, r4
 800457c:	4628      	mov	r0, r5
 800457e:	f000 f9d1 	bl	8004924 <_sbrk_r>
 8004582:	1c43      	adds	r3, r0, #1
 8004584:	d103      	bne.n	800458e <sbrk_aligned+0x26>
 8004586:	f04f 34ff 	mov.w	r4, #4294967295
 800458a:	4620      	mov	r0, r4
 800458c:	bd70      	pop	{r4, r5, r6, pc}
 800458e:	1cc4      	adds	r4, r0, #3
 8004590:	f024 0403 	bic.w	r4, r4, #3
 8004594:	42a0      	cmp	r0, r4
 8004596:	d0f8      	beq.n	800458a <sbrk_aligned+0x22>
 8004598:	1a21      	subs	r1, r4, r0
 800459a:	4628      	mov	r0, r5
 800459c:	f000 f9c2 	bl	8004924 <_sbrk_r>
 80045a0:	3001      	adds	r0, #1
 80045a2:	d1f2      	bne.n	800458a <sbrk_aligned+0x22>
 80045a4:	e7ef      	b.n	8004586 <sbrk_aligned+0x1e>
 80045a6:	bf00      	nop
 80045a8:	200002c4 	.word	0x200002c4

080045ac <_malloc_r>:
 80045ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b0:	1ccd      	adds	r5, r1, #3
 80045b2:	f025 0503 	bic.w	r5, r5, #3
 80045b6:	3508      	adds	r5, #8
 80045b8:	2d0c      	cmp	r5, #12
 80045ba:	bf38      	it	cc
 80045bc:	250c      	movcc	r5, #12
 80045be:	2d00      	cmp	r5, #0
 80045c0:	4606      	mov	r6, r0
 80045c2:	db01      	blt.n	80045c8 <_malloc_r+0x1c>
 80045c4:	42a9      	cmp	r1, r5
 80045c6:	d904      	bls.n	80045d2 <_malloc_r+0x26>
 80045c8:	230c      	movs	r3, #12
 80045ca:	6033      	str	r3, [r6, #0]
 80045cc:	2000      	movs	r0, #0
 80045ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80046a8 <_malloc_r+0xfc>
 80045d6:	f000 f869 	bl	80046ac <__malloc_lock>
 80045da:	f8d8 3000 	ldr.w	r3, [r8]
 80045de:	461c      	mov	r4, r3
 80045e0:	bb44      	cbnz	r4, 8004634 <_malloc_r+0x88>
 80045e2:	4629      	mov	r1, r5
 80045e4:	4630      	mov	r0, r6
 80045e6:	f7ff ffbf 	bl	8004568 <sbrk_aligned>
 80045ea:	1c43      	adds	r3, r0, #1
 80045ec:	4604      	mov	r4, r0
 80045ee:	d158      	bne.n	80046a2 <_malloc_r+0xf6>
 80045f0:	f8d8 4000 	ldr.w	r4, [r8]
 80045f4:	4627      	mov	r7, r4
 80045f6:	2f00      	cmp	r7, #0
 80045f8:	d143      	bne.n	8004682 <_malloc_r+0xd6>
 80045fa:	2c00      	cmp	r4, #0
 80045fc:	d04b      	beq.n	8004696 <_malloc_r+0xea>
 80045fe:	6823      	ldr	r3, [r4, #0]
 8004600:	4639      	mov	r1, r7
 8004602:	4630      	mov	r0, r6
 8004604:	eb04 0903 	add.w	r9, r4, r3
 8004608:	f000 f98c 	bl	8004924 <_sbrk_r>
 800460c:	4581      	cmp	r9, r0
 800460e:	d142      	bne.n	8004696 <_malloc_r+0xea>
 8004610:	6821      	ldr	r1, [r4, #0]
 8004612:	1a6d      	subs	r5, r5, r1
 8004614:	4629      	mov	r1, r5
 8004616:	4630      	mov	r0, r6
 8004618:	f7ff ffa6 	bl	8004568 <sbrk_aligned>
 800461c:	3001      	adds	r0, #1
 800461e:	d03a      	beq.n	8004696 <_malloc_r+0xea>
 8004620:	6823      	ldr	r3, [r4, #0]
 8004622:	442b      	add	r3, r5
 8004624:	6023      	str	r3, [r4, #0]
 8004626:	f8d8 3000 	ldr.w	r3, [r8]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	bb62      	cbnz	r2, 8004688 <_malloc_r+0xdc>
 800462e:	f8c8 7000 	str.w	r7, [r8]
 8004632:	e00f      	b.n	8004654 <_malloc_r+0xa8>
 8004634:	6822      	ldr	r2, [r4, #0]
 8004636:	1b52      	subs	r2, r2, r5
 8004638:	d420      	bmi.n	800467c <_malloc_r+0xd0>
 800463a:	2a0b      	cmp	r2, #11
 800463c:	d917      	bls.n	800466e <_malloc_r+0xc2>
 800463e:	1961      	adds	r1, r4, r5
 8004640:	42a3      	cmp	r3, r4
 8004642:	6025      	str	r5, [r4, #0]
 8004644:	bf18      	it	ne
 8004646:	6059      	strne	r1, [r3, #4]
 8004648:	6863      	ldr	r3, [r4, #4]
 800464a:	bf08      	it	eq
 800464c:	f8c8 1000 	streq.w	r1, [r8]
 8004650:	5162      	str	r2, [r4, r5]
 8004652:	604b      	str	r3, [r1, #4]
 8004654:	4630      	mov	r0, r6
 8004656:	f000 f82f 	bl	80046b8 <__malloc_unlock>
 800465a:	f104 000b 	add.w	r0, r4, #11
 800465e:	1d23      	adds	r3, r4, #4
 8004660:	f020 0007 	bic.w	r0, r0, #7
 8004664:	1ac2      	subs	r2, r0, r3
 8004666:	bf1c      	itt	ne
 8004668:	1a1b      	subne	r3, r3, r0
 800466a:	50a3      	strne	r3, [r4, r2]
 800466c:	e7af      	b.n	80045ce <_malloc_r+0x22>
 800466e:	6862      	ldr	r2, [r4, #4]
 8004670:	42a3      	cmp	r3, r4
 8004672:	bf0c      	ite	eq
 8004674:	f8c8 2000 	streq.w	r2, [r8]
 8004678:	605a      	strne	r2, [r3, #4]
 800467a:	e7eb      	b.n	8004654 <_malloc_r+0xa8>
 800467c:	4623      	mov	r3, r4
 800467e:	6864      	ldr	r4, [r4, #4]
 8004680:	e7ae      	b.n	80045e0 <_malloc_r+0x34>
 8004682:	463c      	mov	r4, r7
 8004684:	687f      	ldr	r7, [r7, #4]
 8004686:	e7b6      	b.n	80045f6 <_malloc_r+0x4a>
 8004688:	461a      	mov	r2, r3
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	42a3      	cmp	r3, r4
 800468e:	d1fb      	bne.n	8004688 <_malloc_r+0xdc>
 8004690:	2300      	movs	r3, #0
 8004692:	6053      	str	r3, [r2, #4]
 8004694:	e7de      	b.n	8004654 <_malloc_r+0xa8>
 8004696:	230c      	movs	r3, #12
 8004698:	6033      	str	r3, [r6, #0]
 800469a:	4630      	mov	r0, r6
 800469c:	f000 f80c 	bl	80046b8 <__malloc_unlock>
 80046a0:	e794      	b.n	80045cc <_malloc_r+0x20>
 80046a2:	6005      	str	r5, [r0, #0]
 80046a4:	e7d6      	b.n	8004654 <_malloc_r+0xa8>
 80046a6:	bf00      	nop
 80046a8:	200002c8 	.word	0x200002c8

080046ac <__malloc_lock>:
 80046ac:	4801      	ldr	r0, [pc, #4]	@ (80046b4 <__malloc_lock+0x8>)
 80046ae:	f7ff bf0e 	b.w	80044ce <__retarget_lock_acquire_recursive>
 80046b2:	bf00      	nop
 80046b4:	200002c0 	.word	0x200002c0

080046b8 <__malloc_unlock>:
 80046b8:	4801      	ldr	r0, [pc, #4]	@ (80046c0 <__malloc_unlock+0x8>)
 80046ba:	f7ff bf09 	b.w	80044d0 <__retarget_lock_release_recursive>
 80046be:	bf00      	nop
 80046c0:	200002c0 	.word	0x200002c0

080046c4 <__sflush_r>:
 80046c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046cc:	0716      	lsls	r6, r2, #28
 80046ce:	4605      	mov	r5, r0
 80046d0:	460c      	mov	r4, r1
 80046d2:	d454      	bmi.n	800477e <__sflush_r+0xba>
 80046d4:	684b      	ldr	r3, [r1, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	dc02      	bgt.n	80046e0 <__sflush_r+0x1c>
 80046da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046dc:	2b00      	cmp	r3, #0
 80046de:	dd48      	ble.n	8004772 <__sflush_r+0xae>
 80046e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80046e2:	2e00      	cmp	r6, #0
 80046e4:	d045      	beq.n	8004772 <__sflush_r+0xae>
 80046e6:	2300      	movs	r3, #0
 80046e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80046ec:	682f      	ldr	r7, [r5, #0]
 80046ee:	6a21      	ldr	r1, [r4, #32]
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	d030      	beq.n	8004756 <__sflush_r+0x92>
 80046f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80046f6:	89a3      	ldrh	r3, [r4, #12]
 80046f8:	0759      	lsls	r1, r3, #29
 80046fa:	d505      	bpl.n	8004708 <__sflush_r+0x44>
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	1ad2      	subs	r2, r2, r3
 8004700:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004702:	b10b      	cbz	r3, 8004708 <__sflush_r+0x44>
 8004704:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	2300      	movs	r3, #0
 800470a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800470c:	6a21      	ldr	r1, [r4, #32]
 800470e:	4628      	mov	r0, r5
 8004710:	47b0      	blx	r6
 8004712:	1c43      	adds	r3, r0, #1
 8004714:	89a3      	ldrh	r3, [r4, #12]
 8004716:	d106      	bne.n	8004726 <__sflush_r+0x62>
 8004718:	6829      	ldr	r1, [r5, #0]
 800471a:	291d      	cmp	r1, #29
 800471c:	d82b      	bhi.n	8004776 <__sflush_r+0xb2>
 800471e:	4a2a      	ldr	r2, [pc, #168]	@ (80047c8 <__sflush_r+0x104>)
 8004720:	410a      	asrs	r2, r1
 8004722:	07d6      	lsls	r6, r2, #31
 8004724:	d427      	bmi.n	8004776 <__sflush_r+0xb2>
 8004726:	2200      	movs	r2, #0
 8004728:	6062      	str	r2, [r4, #4]
 800472a:	04d9      	lsls	r1, r3, #19
 800472c:	6922      	ldr	r2, [r4, #16]
 800472e:	6022      	str	r2, [r4, #0]
 8004730:	d504      	bpl.n	800473c <__sflush_r+0x78>
 8004732:	1c42      	adds	r2, r0, #1
 8004734:	d101      	bne.n	800473a <__sflush_r+0x76>
 8004736:	682b      	ldr	r3, [r5, #0]
 8004738:	b903      	cbnz	r3, 800473c <__sflush_r+0x78>
 800473a:	6560      	str	r0, [r4, #84]	@ 0x54
 800473c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800473e:	602f      	str	r7, [r5, #0]
 8004740:	b1b9      	cbz	r1, 8004772 <__sflush_r+0xae>
 8004742:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004746:	4299      	cmp	r1, r3
 8004748:	d002      	beq.n	8004750 <__sflush_r+0x8c>
 800474a:	4628      	mov	r0, r5
 800474c:	f7ff fec2 	bl	80044d4 <_free_r>
 8004750:	2300      	movs	r3, #0
 8004752:	6363      	str	r3, [r4, #52]	@ 0x34
 8004754:	e00d      	b.n	8004772 <__sflush_r+0xae>
 8004756:	2301      	movs	r3, #1
 8004758:	4628      	mov	r0, r5
 800475a:	47b0      	blx	r6
 800475c:	4602      	mov	r2, r0
 800475e:	1c50      	adds	r0, r2, #1
 8004760:	d1c9      	bne.n	80046f6 <__sflush_r+0x32>
 8004762:	682b      	ldr	r3, [r5, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0c6      	beq.n	80046f6 <__sflush_r+0x32>
 8004768:	2b1d      	cmp	r3, #29
 800476a:	d001      	beq.n	8004770 <__sflush_r+0xac>
 800476c:	2b16      	cmp	r3, #22
 800476e:	d11e      	bne.n	80047ae <__sflush_r+0xea>
 8004770:	602f      	str	r7, [r5, #0]
 8004772:	2000      	movs	r0, #0
 8004774:	e022      	b.n	80047bc <__sflush_r+0xf8>
 8004776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800477a:	b21b      	sxth	r3, r3
 800477c:	e01b      	b.n	80047b6 <__sflush_r+0xf2>
 800477e:	690f      	ldr	r7, [r1, #16]
 8004780:	2f00      	cmp	r7, #0
 8004782:	d0f6      	beq.n	8004772 <__sflush_r+0xae>
 8004784:	0793      	lsls	r3, r2, #30
 8004786:	680e      	ldr	r6, [r1, #0]
 8004788:	bf08      	it	eq
 800478a:	694b      	ldreq	r3, [r1, #20]
 800478c:	600f      	str	r7, [r1, #0]
 800478e:	bf18      	it	ne
 8004790:	2300      	movne	r3, #0
 8004792:	eba6 0807 	sub.w	r8, r6, r7
 8004796:	608b      	str	r3, [r1, #8]
 8004798:	f1b8 0f00 	cmp.w	r8, #0
 800479c:	dde9      	ble.n	8004772 <__sflush_r+0xae>
 800479e:	6a21      	ldr	r1, [r4, #32]
 80047a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80047a2:	4643      	mov	r3, r8
 80047a4:	463a      	mov	r2, r7
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b0      	blx	r6
 80047aa:	2800      	cmp	r0, #0
 80047ac:	dc08      	bgt.n	80047c0 <__sflush_r+0xfc>
 80047ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047b6:	81a3      	strh	r3, [r4, #12]
 80047b8:	f04f 30ff 	mov.w	r0, #4294967295
 80047bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047c0:	4407      	add	r7, r0
 80047c2:	eba8 0800 	sub.w	r8, r8, r0
 80047c6:	e7e7      	b.n	8004798 <__sflush_r+0xd4>
 80047c8:	dfbffffe 	.word	0xdfbffffe

080047cc <_fflush_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	690b      	ldr	r3, [r1, #16]
 80047d0:	4605      	mov	r5, r0
 80047d2:	460c      	mov	r4, r1
 80047d4:	b913      	cbnz	r3, 80047dc <_fflush_r+0x10>
 80047d6:	2500      	movs	r5, #0
 80047d8:	4628      	mov	r0, r5
 80047da:	bd38      	pop	{r3, r4, r5, pc}
 80047dc:	b118      	cbz	r0, 80047e6 <_fflush_r+0x1a>
 80047de:	6a03      	ldr	r3, [r0, #32]
 80047e0:	b90b      	cbnz	r3, 80047e6 <_fflush_r+0x1a>
 80047e2:	f7ff fc8f 	bl	8004104 <__sinit>
 80047e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d0f3      	beq.n	80047d6 <_fflush_r+0xa>
 80047ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80047f0:	07d0      	lsls	r0, r2, #31
 80047f2:	d404      	bmi.n	80047fe <_fflush_r+0x32>
 80047f4:	0599      	lsls	r1, r3, #22
 80047f6:	d402      	bmi.n	80047fe <_fflush_r+0x32>
 80047f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80047fa:	f7ff fe68 	bl	80044ce <__retarget_lock_acquire_recursive>
 80047fe:	4628      	mov	r0, r5
 8004800:	4621      	mov	r1, r4
 8004802:	f7ff ff5f 	bl	80046c4 <__sflush_r>
 8004806:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004808:	07da      	lsls	r2, r3, #31
 800480a:	4605      	mov	r5, r0
 800480c:	d4e4      	bmi.n	80047d8 <_fflush_r+0xc>
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	059b      	lsls	r3, r3, #22
 8004812:	d4e1      	bmi.n	80047d8 <_fflush_r+0xc>
 8004814:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004816:	f7ff fe5b 	bl	80044d0 <__retarget_lock_release_recursive>
 800481a:	e7dd      	b.n	80047d8 <_fflush_r+0xc>

0800481c <__swhatbuf_r>:
 800481c:	b570      	push	{r4, r5, r6, lr}
 800481e:	460c      	mov	r4, r1
 8004820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004824:	2900      	cmp	r1, #0
 8004826:	b096      	sub	sp, #88	@ 0x58
 8004828:	4615      	mov	r5, r2
 800482a:	461e      	mov	r6, r3
 800482c:	da0d      	bge.n	800484a <__swhatbuf_r+0x2e>
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	bf14      	ite	ne
 800483a:	2340      	movne	r3, #64	@ 0x40
 800483c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004840:	2000      	movs	r0, #0
 8004842:	6031      	str	r1, [r6, #0]
 8004844:	602b      	str	r3, [r5, #0]
 8004846:	b016      	add	sp, #88	@ 0x58
 8004848:	bd70      	pop	{r4, r5, r6, pc}
 800484a:	466a      	mov	r2, sp
 800484c:	f000 f848 	bl	80048e0 <_fstat_r>
 8004850:	2800      	cmp	r0, #0
 8004852:	dbec      	blt.n	800482e <__swhatbuf_r+0x12>
 8004854:	9901      	ldr	r1, [sp, #4]
 8004856:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800485a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800485e:	4259      	negs	r1, r3
 8004860:	4159      	adcs	r1, r3
 8004862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004866:	e7eb      	b.n	8004840 <__swhatbuf_r+0x24>

08004868 <__smakebuf_r>:
 8004868:	898b      	ldrh	r3, [r1, #12]
 800486a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800486c:	079d      	lsls	r5, r3, #30
 800486e:	4606      	mov	r6, r0
 8004870:	460c      	mov	r4, r1
 8004872:	d507      	bpl.n	8004884 <__smakebuf_r+0x1c>
 8004874:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004878:	6023      	str	r3, [r4, #0]
 800487a:	6123      	str	r3, [r4, #16]
 800487c:	2301      	movs	r3, #1
 800487e:	6163      	str	r3, [r4, #20]
 8004880:	b003      	add	sp, #12
 8004882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004884:	ab01      	add	r3, sp, #4
 8004886:	466a      	mov	r2, sp
 8004888:	f7ff ffc8 	bl	800481c <__swhatbuf_r>
 800488c:	9f00      	ldr	r7, [sp, #0]
 800488e:	4605      	mov	r5, r0
 8004890:	4639      	mov	r1, r7
 8004892:	4630      	mov	r0, r6
 8004894:	f7ff fe8a 	bl	80045ac <_malloc_r>
 8004898:	b948      	cbnz	r0, 80048ae <__smakebuf_r+0x46>
 800489a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800489e:	059a      	lsls	r2, r3, #22
 80048a0:	d4ee      	bmi.n	8004880 <__smakebuf_r+0x18>
 80048a2:	f023 0303 	bic.w	r3, r3, #3
 80048a6:	f043 0302 	orr.w	r3, r3, #2
 80048aa:	81a3      	strh	r3, [r4, #12]
 80048ac:	e7e2      	b.n	8004874 <__smakebuf_r+0xc>
 80048ae:	89a3      	ldrh	r3, [r4, #12]
 80048b0:	6020      	str	r0, [r4, #0]
 80048b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048b6:	81a3      	strh	r3, [r4, #12]
 80048b8:	9b01      	ldr	r3, [sp, #4]
 80048ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80048be:	b15b      	cbz	r3, 80048d8 <__smakebuf_r+0x70>
 80048c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048c4:	4630      	mov	r0, r6
 80048c6:	f000 f81d 	bl	8004904 <_isatty_r>
 80048ca:	b128      	cbz	r0, 80048d8 <__smakebuf_r+0x70>
 80048cc:	89a3      	ldrh	r3, [r4, #12]
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	81a3      	strh	r3, [r4, #12]
 80048d8:	89a3      	ldrh	r3, [r4, #12]
 80048da:	431d      	orrs	r5, r3
 80048dc:	81a5      	strh	r5, [r4, #12]
 80048de:	e7cf      	b.n	8004880 <__smakebuf_r+0x18>

080048e0 <_fstat_r>:
 80048e0:	b538      	push	{r3, r4, r5, lr}
 80048e2:	4d07      	ldr	r5, [pc, #28]	@ (8004900 <_fstat_r+0x20>)
 80048e4:	2300      	movs	r3, #0
 80048e6:	4604      	mov	r4, r0
 80048e8:	4608      	mov	r0, r1
 80048ea:	4611      	mov	r1, r2
 80048ec:	602b      	str	r3, [r5, #0]
 80048ee:	f7fc fabd 	bl	8000e6c <_fstat>
 80048f2:	1c43      	adds	r3, r0, #1
 80048f4:	d102      	bne.n	80048fc <_fstat_r+0x1c>
 80048f6:	682b      	ldr	r3, [r5, #0]
 80048f8:	b103      	cbz	r3, 80048fc <_fstat_r+0x1c>
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	bd38      	pop	{r3, r4, r5, pc}
 80048fe:	bf00      	nop
 8004900:	200002bc 	.word	0x200002bc

08004904 <_isatty_r>:
 8004904:	b538      	push	{r3, r4, r5, lr}
 8004906:	4d06      	ldr	r5, [pc, #24]	@ (8004920 <_isatty_r+0x1c>)
 8004908:	2300      	movs	r3, #0
 800490a:	4604      	mov	r4, r0
 800490c:	4608      	mov	r0, r1
 800490e:	602b      	str	r3, [r5, #0]
 8004910:	f7fc fabc 	bl	8000e8c <_isatty>
 8004914:	1c43      	adds	r3, r0, #1
 8004916:	d102      	bne.n	800491e <_isatty_r+0x1a>
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	b103      	cbz	r3, 800491e <_isatty_r+0x1a>
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	bd38      	pop	{r3, r4, r5, pc}
 8004920:	200002bc 	.word	0x200002bc

08004924 <_sbrk_r>:
 8004924:	b538      	push	{r3, r4, r5, lr}
 8004926:	4d06      	ldr	r5, [pc, #24]	@ (8004940 <_sbrk_r+0x1c>)
 8004928:	2300      	movs	r3, #0
 800492a:	4604      	mov	r4, r0
 800492c:	4608      	mov	r0, r1
 800492e:	602b      	str	r3, [r5, #0]
 8004930:	f7fc fac4 	bl	8000ebc <_sbrk>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d102      	bne.n	800493e <_sbrk_r+0x1a>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	b103      	cbz	r3, 800493e <_sbrk_r+0x1a>
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	200002bc 	.word	0x200002bc

08004944 <_init>:
 8004944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004946:	bf00      	nop
 8004948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494a:	bc08      	pop	{r3}
 800494c:	469e      	mov	lr, r3
 800494e:	4770      	bx	lr

08004950 <_fini>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr
